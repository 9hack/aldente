syntax = "proto2";

package proto;

message ServerMessage {
  oneof message_type {
    uint64 ping = 1;
    Construct build_update = 2;
    JoinResponse join_response = 3;
    GameState state_update = 4;
    Phase phase_update = 5;
    int32 player_finished = 6;
    PlayerStats player_stats_update = 7;
    int32 time_update = 8; // in seconds
    AvatarChange change_avatar_update = 9;
  }
}

message ClientMessage {
  oneof message_type {
    Ping ping = 1;
    Construct build_request = 2;
    string join_request = 3;
    StickData move_request = 4;
    Phase phase_request = 5;
    int32 interact_request = 6;
    int32 ready_request = 7;
    AvatarChange change_avatar_request = 8;
  }
}

message Ping {
  optional int32 client_id = 1;
  optional uint64 ping = 2;
}

message Construct {
  optional int32 type = 1;
  optional int32 x = 2;
  optional int32 z = 3;
  optional int32 id = 4;
  optional bool status = 5;
  optional int32 player_id = 6;
  optional float fwd_x = 7;
  optional float fwd_y = 8;
  optional float fwd_z = 9;
}

message JoinResponse {
  optional bool status = 1;
  optional int32 num_players = 2;
  optional int32 id = 3;
  optional int32 obj_id = 4;
  optional int32 model_index = 5;
}

message GameState {
  repeated GameObject objects = 1;
  repeated IdPair collisions = 2;
  repeated IdPair interacts = 3;
}

message IdPair {
  optional int32 initiator = 1;
  optional int32 other = 2;
}

message GameObject {
  enum Type {
    PLAYER = 0;
    GOAL = 1;
    CHEST = 2;
    SPIKE = 3;
    ESSENCE = 4;
  }

  optional int32 id = 1;
  optional Type type = 2;
  repeated float transform = 3;
  optional int32 client_id = 4;
  optional bool enabled = 5;
  optional int32 model_index = 6; // only for Players
}

message Collision {
  optional int32 id = 1;
  optional int32 type = 2;
}

message StickData {
  enum Stick {
    STICK_LEFT = 0;
    STICK_RIGHT = 1;
  }

  optional Stick input = 1;
  optional int32 x = 2;
  optional int32 y = 3;
  optional int32 id = 4;
}

enum Phase {
  NOOP = 4;
  MENU = 0;
  BUILD = 1;
  DUNGEON = 2;
  MINIGAME = 3;
}

message PlayerStats {
  optional int32 id = 1; // Refers to GameObject ID of player.
  optional int32 coins = 2;
}

message AvatarChange {
  optional int32 player_id = 1;
  optional int32 model_index = 2;
}
