// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {

namespace {

const ::google::protobuf::Descriptor* ServerMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerMessage_reflection_ = NULL;
struct ServerMessageOneofInstance {
  ::google::protobuf::uint64 ping_;
  const ::proto::Construct* build_update_;
  const ::proto::JoinResponse* join_response_;
  const ::proto::GameState* state_update_;
  int phase_update_;
  ::google::protobuf::int32 player_finished_;
  const ::proto::PlayerStats* player_stats_update_;
  ::google::protobuf::int32 time_update_;
  const ::proto::AvatarChange* change_avatar_update_;
  const ::proto::PumpAssignment* pump_assignment_;
  ::google::protobuf::int32 pump_update_;
  const ::proto::ReadyUpdate* ready_update_;
}* ServerMessage_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* ClientMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientMessage_reflection_ = NULL;
struct ClientMessageOneofInstance {
  const ::proto::Ping* ping_;
  const ::proto::Construct* build_request_;
  const ::std::string* join_request_;
  const ::proto::StickData* move_request_;
  int phase_request_;
  ::google::protobuf::int32 interact_request_;
  ::google::protobuf::int32 ready_request_;
  const ::proto::AvatarChange* change_avatar_request_;
  ::google::protobuf::int32 pump_request_;
  ::google::protobuf::int32 player_finished_dialogue_;
}* ClientMessage_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* Ping_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ping_reflection_ = NULL;
const ::google::protobuf::Descriptor* Construct_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Construct_reflection_ = NULL;
const ::google::protobuf::Descriptor* JoinResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JoinResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameState_reflection_ = NULL;
const ::google::protobuf::Descriptor* IdPair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IdPair_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameObject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameObject_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GameObject_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Collision_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Collision_reflection_ = NULL;
const ::google::protobuf::Descriptor* StickData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StickData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* StickData_Stick_descriptor_ = NULL;
const ::google::protobuf::Descriptor* PlayerStats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerStats_reflection_ = NULL;
const ::google::protobuf::Descriptor* AvatarChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AvatarChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* PumpPair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PumpPair_reflection_ = NULL;
const ::google::protobuf::Descriptor* PumpAssignment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PumpAssignment_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReadyUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReadyUpdate_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Phase_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2eproto() {
  protobuf_AddDesc_net_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net.proto");
  GOOGLE_CHECK(file != NULL);
  ServerMessage_descriptor_ = file->message_type(0);
  static const int ServerMessage_offsets_[13] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ServerMessage_default_oneof_instance_, ping_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ServerMessage_default_oneof_instance_, build_update_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ServerMessage_default_oneof_instance_, join_response_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ServerMessage_default_oneof_instance_, state_update_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ServerMessage_default_oneof_instance_, phase_update_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ServerMessage_default_oneof_instance_, player_finished_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ServerMessage_default_oneof_instance_, player_stats_update_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ServerMessage_default_oneof_instance_, time_update_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ServerMessage_default_oneof_instance_, change_avatar_update_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ServerMessage_default_oneof_instance_, pump_assignment_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ServerMessage_default_oneof_instance_, pump_update_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ServerMessage_default_oneof_instance_, ready_update_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMessage, message_type_),
  };
  ServerMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerMessage_descriptor_,
      ServerMessage::default_instance_,
      ServerMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMessage, _unknown_fields_),
      -1,
      ServerMessage_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMessage, _oneof_case_[0]),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerMessage));
  ClientMessage_descriptor_ = file->message_type(1);
  static const int ClientMessage_offsets_[11] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ClientMessage_default_oneof_instance_, ping_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ClientMessage_default_oneof_instance_, build_request_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ClientMessage_default_oneof_instance_, join_request_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ClientMessage_default_oneof_instance_, move_request_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ClientMessage_default_oneof_instance_, phase_request_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ClientMessage_default_oneof_instance_, interact_request_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ClientMessage_default_oneof_instance_, ready_request_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ClientMessage_default_oneof_instance_, change_avatar_request_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ClientMessage_default_oneof_instance_, pump_request_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ClientMessage_default_oneof_instance_, player_finished_dialogue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage, message_type_),
  };
  ClientMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientMessage_descriptor_,
      ClientMessage::default_instance_,
      ClientMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage, _unknown_fields_),
      -1,
      ClientMessage_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage, _oneof_case_[0]),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientMessage));
  Ping_descriptor_ = file->message_type(2);
  static const int Ping_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ping, client_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ping, ping_),
  };
  Ping_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Ping_descriptor_,
      Ping::default_instance_,
      Ping_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ping, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ping, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Ping));
  Construct_descriptor_ = file->message_type(3);
  static const int Construct_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Construct, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Construct, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Construct, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Construct, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Construct, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Construct, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Construct, fwd_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Construct, fwd_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Construct, fwd_z_),
  };
  Construct_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Construct_descriptor_,
      Construct::default_instance_,
      Construct_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Construct, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Construct, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Construct));
  JoinResponse_descriptor_ = file->message_type(4);
  static const int JoinResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinResponse, num_players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinResponse, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinResponse, obj_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinResponse, model_index_),
  };
  JoinResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JoinResponse_descriptor_,
      JoinResponse::default_instance_,
      JoinResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JoinResponse));
  GameState_descriptor_ = file->message_type(5);
  static const int GameState_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameState, objects_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameState, collisions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameState, interacts_),
  };
  GameState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameState_descriptor_,
      GameState::default_instance_,
      GameState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameState));
  IdPair_descriptor_ = file->message_type(6);
  static const int IdPair_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IdPair, initiator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IdPair, other_),
  };
  IdPair_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IdPair_descriptor_,
      IdPair::default_instance_,
      IdPair_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IdPair, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IdPair, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IdPair));
  GameObject_descriptor_ = file->message_type(7);
  static const int GameObject_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameObject, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameObject, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameObject, transform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameObject, client_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameObject, enabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameObject, model_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameObject, parent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameObject, subtype_),
  };
  GameObject_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameObject_descriptor_,
      GameObject::default_instance_,
      GameObject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameObject, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameObject, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameObject));
  GameObject_Type_descriptor_ = GameObject_descriptor_->enum_type(0);
  Collision_descriptor_ = file->message_type(8);
  static const int Collision_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Collision, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Collision, type_),
  };
  Collision_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Collision_descriptor_,
      Collision::default_instance_,
      Collision_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Collision, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Collision, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Collision));
  StickData_descriptor_ = file->message_type(9);
  static const int StickData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StickData, input_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StickData, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StickData, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StickData, id_),
  };
  StickData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StickData_descriptor_,
      StickData::default_instance_,
      StickData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StickData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StickData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StickData));
  StickData_Stick_descriptor_ = StickData_descriptor_->enum_type(0);
  PlayerStats_descriptor_ = file->message_type(10);
  static const int PlayerStats_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerStats, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerStats, coins_),
  };
  PlayerStats_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerStats_descriptor_,
      PlayerStats::default_instance_,
      PlayerStats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerStats, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerStats, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerStats));
  AvatarChange_descriptor_ = file->message_type(11);
  static const int AvatarChange_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarChange, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarChange, model_index_),
  };
  AvatarChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AvatarChange_descriptor_,
      AvatarChange::default_instance_,
      AvatarChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AvatarChange));
  PumpPair_descriptor_ = file->message_type(12);
  static const int PumpPair_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PumpPair, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PumpPair, pump_),
  };
  PumpPair_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PumpPair_descriptor_,
      PumpPair::default_instance_,
      PumpPair_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PumpPair, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PumpPair, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PumpPair));
  PumpAssignment_descriptor_ = file->message_type(13);
  static const int PumpAssignment_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PumpAssignment, pairs_),
  };
  PumpAssignment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PumpAssignment_descriptor_,
      PumpAssignment::default_instance_,
      PumpAssignment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PumpAssignment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PumpAssignment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PumpAssignment));
  ReadyUpdate_descriptor_ = file->message_type(14);
  static const int ReadyUpdate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadyUpdate, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadyUpdate, ready_),
  };
  ReadyUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReadyUpdate_descriptor_,
      ReadyUpdate::default_instance_,
      ReadyUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadyUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadyUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReadyUpdate));
  Phase_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerMessage_descriptor_, &ServerMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientMessage_descriptor_, &ClientMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Ping_descriptor_, &Ping::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Construct_descriptor_, &Construct::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JoinResponse_descriptor_, &JoinResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameState_descriptor_, &GameState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IdPair_descriptor_, &IdPair::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameObject_descriptor_, &GameObject::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Collision_descriptor_, &Collision::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StickData_descriptor_, &StickData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerStats_descriptor_, &PlayerStats::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AvatarChange_descriptor_, &AvatarChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PumpPair_descriptor_, &PumpPair::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PumpAssignment_descriptor_, &PumpAssignment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReadyUpdate_descriptor_, &ReadyUpdate::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2eproto() {
  delete ServerMessage::default_instance_;
  delete ServerMessage_default_oneof_instance_;
  delete ServerMessage_reflection_;
  delete ClientMessage::default_instance_;
  delete ClientMessage_default_oneof_instance_;
  delete ClientMessage_reflection_;
  delete Ping::default_instance_;
  delete Ping_reflection_;
  delete Construct::default_instance_;
  delete Construct_reflection_;
  delete JoinResponse::default_instance_;
  delete JoinResponse_reflection_;
  delete GameState::default_instance_;
  delete GameState_reflection_;
  delete IdPair::default_instance_;
  delete IdPair_reflection_;
  delete GameObject::default_instance_;
  delete GameObject_reflection_;
  delete Collision::default_instance_;
  delete Collision_reflection_;
  delete StickData::default_instance_;
  delete StickData_reflection_;
  delete PlayerStats::default_instance_;
  delete PlayerStats_reflection_;
  delete AvatarChange::default_instance_;
  delete AvatarChange_reflection_;
  delete PumpPair::default_instance_;
  delete PumpPair_reflection_;
  delete PumpAssignment::default_instance_;
  delete PumpAssignment_reflection_;
  delete ReadyUpdate::default_instance_;
  delete ReadyUpdate_reflection_;
}

void protobuf_AddDesc_net_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tnet.proto\022\005proto\"\346\003\n\rServerMessage\022\016\n\004"
    "ping\030\001 \001(\004H\000\022(\n\014build_update\030\002 \001(\0132\020.pro"
    "to.ConstructH\000\022,\n\rjoin_response\030\003 \001(\0132\023."
    "proto.JoinResponseH\000\022(\n\014state_update\030\004 \001"
    "(\0132\020.proto.GameStateH\000\022$\n\014phase_update\030\005"
    " \001(\0162\014.proto.PhaseH\000\022\031\n\017player_finished\030"
    "\006 \001(\005H\000\0221\n\023player_stats_update\030\007 \001(\0132\022.p"
    "roto.PlayerStatsH\000\022\025\n\013time_update\030\010 \001(\005H"
    "\000\0223\n\024change_avatar_update\030\t \001(\0132\023.proto."
    "AvatarChangeH\000\0220\n\017pump_assignment\030\n \001(\0132"
    "\025.proto.PumpAssignmentH\000\022\025\n\013pump_update\030"
    "\013 \001(\005H\000\022*\n\014ready_update\030\014 \001(\0132\022.proto.Re"
    "adyUpdateH\000B\016\n\014message_type\"\367\002\n\rClientMe"
    "ssage\022\033\n\004ping\030\001 \001(\0132\013.proto.PingH\000\022)\n\rbu"
    "ild_request\030\002 \001(\0132\020.proto.ConstructH\000\022\026\n"
    "\014join_request\030\003 \001(\tH\000\022(\n\014move_request\030\004 "
    "\001(\0132\020.proto.StickDataH\000\022%\n\rphase_request"
    "\030\005 \001(\0162\014.proto.PhaseH\000\022\032\n\020interact_reque"
    "st\030\006 \001(\005H\000\022\027\n\rready_request\030\007 \001(\005H\000\0224\n\025c"
    "hange_avatar_request\030\010 \001(\0132\023.proto.Avata"
    "rChangeH\000\022\026\n\014pump_request\030\t \001(\005H\000\022\"\n\030pla"
    "yer_finished_dialogue\030\n \001(\005H\000B\016\n\014message"
    "_type\"\'\n\004Ping\022\021\n\tclient_id\030\001 \001(\005\022\014\n\004ping"
    "\030\002 \001(\004\"\213\001\n\tConstruct\022\014\n\004type\030\001 \001(\005\022\t\n\001x\030"
    "\002 \001(\005\022\t\n\001z\030\003 \001(\005\022\n\n\002id\030\004 \001(\005\022\016\n\006status\030\005"
    " \001(\010\022\021\n\tplayer_id\030\006 \001(\005\022\r\n\005fwd_x\030\007 \001(\002\022\r"
    "\n\005fwd_y\030\010 \001(\002\022\r\n\005fwd_z\030\t \001(\002\"d\n\014JoinResp"
    "onse\022\016\n\006status\030\001 \001(\010\022\023\n\013num_players\030\002 \001("
    "\005\022\n\n\002id\030\003 \001(\005\022\016\n\006obj_id\030\004 \001(\005\022\023\n\013model_i"
    "ndex\030\005 \001(\005\"t\n\tGameState\022\"\n\007objects\030\001 \003(\013"
    "2\021.proto.GameObject\022!\n\ncollisions\030\002 \003(\0132"
    "\r.proto.IdPair\022 \n\tinteracts\030\003 \003(\0132\r.prot"
    "o.IdPair\"*\n\006IdPair\022\021\n\tinitiator\030\001 \001(\005\022\r\n"
    "\005other\030\002 \001(\005\"\377\001\n\nGameObject\022\n\n\002id\030\001 \001(\005\022"
    "$\n\004type\030\002 \001(\0162\026.proto.GameObject.Type\022\021\n"
    "\ttransform\030\003 \003(\002\022\021\n\tclient_id\030\004 \001(\005\022\017\n\007e"
    "nabled\030\005 \001(\010\022\023\n\013model_index\030\006 \001(\005\022\021\n\tpar"
    "ent_id\030\007 \001(\005\022\017\n\007subtype\030\010 \001(\005\"O\n\004Type\022\n\n"
    "\006PLAYER\020\000\022\010\n\004GOAL\020\001\022\t\n\005CHEST\020\002\022\t\n\005SPIKE\020"
    "\003\022\013\n\007ESSENCE\020\004\022\016\n\nPROJECTILE\020\005\"%\n\tCollis"
    "ion\022\n\n\002id\030\001 \001(\005\022\014\n\004type\030\002 \001(\005\"~\n\tStickDa"
    "ta\022%\n\005input\030\001 \001(\0162\026.proto.StickData.Stic"
    "k\022\t\n\001x\030\002 \001(\005\022\t\n\001y\030\003 \001(\005\022\n\n\002id\030\004 \001(\005\"(\n\005S"
    "tick\022\016\n\nSTICK_LEFT\020\000\022\017\n\013STICK_RIGHT\020\001\"(\n"
    "\013PlayerStats\022\n\n\002id\030\001 \001(\005\022\r\n\005coins\030\002 \001(\005\""
    "6\n\014AvatarChange\022\021\n\tplayer_id\030\001 \001(\005\022\023\n\013mo"
    "del_index\030\002 \001(\005\"+\n\010PumpPair\022\021\n\tplayer_id"
    "\030\001 \001(\005\022\014\n\004pump\030\002 \001(\005\"0\n\016PumpAssignment\022\036"
    "\n\005pairs\030\001 \003(\0132\017.proto.PumpPair\"/\n\013ReadyU"
    "pdate\022\021\n\tplayer_id\030\001 \001(\005\022\r\n\005ready\030\002 \001(\010*"
    "\241\001\n\005Phase\022\010\n\004NOOP\020\004\022\010\n\004MENU\020\000\022\t\n\005BUILD\020\001"
    "\022\013\n\007DUNGEON\020\002\022\014\n\010MINIGAME\020\003\022\024\n\020MINIGAME_"
    "RESULTS\020\t\022\022\n\016BUILD_TUTORIAL\020\005\022\024\n\020DUNGEON"
    "_TUTORIAL\020\006\022\025\n\021MINIGAME_TUTORIAL\020\007\022\007\n\003EN"
    "D\020\010", 2163);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net.proto", &protobuf_RegisterTypes);
  ServerMessage::default_instance_ = new ServerMessage();
  ServerMessage_default_oneof_instance_ = new ServerMessageOneofInstance;
  ClientMessage::default_instance_ = new ClientMessage();
  ClientMessage_default_oneof_instance_ = new ClientMessageOneofInstance;
  Ping::default_instance_ = new Ping();
  Construct::default_instance_ = new Construct();
  JoinResponse::default_instance_ = new JoinResponse();
  GameState::default_instance_ = new GameState();
  IdPair::default_instance_ = new IdPair();
  GameObject::default_instance_ = new GameObject();
  Collision::default_instance_ = new Collision();
  StickData::default_instance_ = new StickData();
  PlayerStats::default_instance_ = new PlayerStats();
  AvatarChange::default_instance_ = new AvatarChange();
  PumpPair::default_instance_ = new PumpPair();
  PumpAssignment::default_instance_ = new PumpAssignment();
  ReadyUpdate::default_instance_ = new ReadyUpdate();
  ServerMessage::default_instance_->InitAsDefaultInstance();
  ClientMessage::default_instance_->InitAsDefaultInstance();
  Ping::default_instance_->InitAsDefaultInstance();
  Construct::default_instance_->InitAsDefaultInstance();
  JoinResponse::default_instance_->InitAsDefaultInstance();
  GameState::default_instance_->InitAsDefaultInstance();
  IdPair::default_instance_->InitAsDefaultInstance();
  GameObject::default_instance_->InitAsDefaultInstance();
  Collision::default_instance_->InitAsDefaultInstance();
  StickData::default_instance_->InitAsDefaultInstance();
  PlayerStats::default_instance_->InitAsDefaultInstance();
  AvatarChange::default_instance_->InitAsDefaultInstance();
  PumpPair::default_instance_->InitAsDefaultInstance();
  PumpAssignment::default_instance_->InitAsDefaultInstance();
  ReadyUpdate::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2eproto {
  StaticDescriptorInitializer_net_2eproto() {
    protobuf_AddDesc_net_2eproto();
  }
} static_descriptor_initializer_net_2eproto_;
const ::google::protobuf::EnumDescriptor* Phase_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Phase_descriptor_;
}
bool Phase_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int ServerMessage::kPingFieldNumber;
const int ServerMessage::kBuildUpdateFieldNumber;
const int ServerMessage::kJoinResponseFieldNumber;
const int ServerMessage::kStateUpdateFieldNumber;
const int ServerMessage::kPhaseUpdateFieldNumber;
const int ServerMessage::kPlayerFinishedFieldNumber;
const int ServerMessage::kPlayerStatsUpdateFieldNumber;
const int ServerMessage::kTimeUpdateFieldNumber;
const int ServerMessage::kChangeAvatarUpdateFieldNumber;
const int ServerMessage::kPumpAssignmentFieldNumber;
const int ServerMessage::kPumpUpdateFieldNumber;
const int ServerMessage::kReadyUpdateFieldNumber;
#endif  // !_MSC_VER

ServerMessage::ServerMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ServerMessage)
}

void ServerMessage::InitAsDefaultInstance() {
  ServerMessage_default_oneof_instance_->ping_ = GOOGLE_ULONGLONG(0);
  ServerMessage_default_oneof_instance_->build_update_ = const_cast< ::proto::Construct*>(&::proto::Construct::default_instance());
  ServerMessage_default_oneof_instance_->join_response_ = const_cast< ::proto::JoinResponse*>(&::proto::JoinResponse::default_instance());
  ServerMessage_default_oneof_instance_->state_update_ = const_cast< ::proto::GameState*>(&::proto::GameState::default_instance());
  ServerMessage_default_oneof_instance_->phase_update_ = 4;
  ServerMessage_default_oneof_instance_->player_finished_ = 0;
  ServerMessage_default_oneof_instance_->player_stats_update_ = const_cast< ::proto::PlayerStats*>(&::proto::PlayerStats::default_instance());
  ServerMessage_default_oneof_instance_->time_update_ = 0;
  ServerMessage_default_oneof_instance_->change_avatar_update_ = const_cast< ::proto::AvatarChange*>(&::proto::AvatarChange::default_instance());
  ServerMessage_default_oneof_instance_->pump_assignment_ = const_cast< ::proto::PumpAssignment*>(&::proto::PumpAssignment::default_instance());
  ServerMessage_default_oneof_instance_->pump_update_ = 0;
  ServerMessage_default_oneof_instance_->ready_update_ = const_cast< ::proto::ReadyUpdate*>(&::proto::ReadyUpdate::default_instance());
}

ServerMessage::ServerMessage(const ServerMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.ServerMessage)
}

void ServerMessage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_message_type();
}

ServerMessage::~ServerMessage() {
  // @@protoc_insertion_point(destructor:proto.ServerMessage)
  SharedDtor();
}

void ServerMessage::SharedDtor() {
  if (has_message_type()) {
    clear_message_type();
  }
  if (this != default_instance_) {
  }
}

void ServerMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerMessage_descriptor_;
}

const ServerMessage& ServerMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2eproto();
  return *default_instance_;
}

ServerMessage* ServerMessage::default_instance_ = NULL;

ServerMessage* ServerMessage::New() const {
  return new ServerMessage;
}

void ServerMessage::clear_message_type() {
  switch(message_type_case()) {
    case kPing: {
      // No need to clear
      break;
    }
    case kBuildUpdate: {
      delete message_type_.build_update_;
      break;
    }
    case kJoinResponse: {
      delete message_type_.join_response_;
      break;
    }
    case kStateUpdate: {
      delete message_type_.state_update_;
      break;
    }
    case kPhaseUpdate: {
      // No need to clear
      break;
    }
    case kPlayerFinished: {
      // No need to clear
      break;
    }
    case kPlayerStatsUpdate: {
      delete message_type_.player_stats_update_;
      break;
    }
    case kTimeUpdate: {
      // No need to clear
      break;
    }
    case kChangeAvatarUpdate: {
      delete message_type_.change_avatar_update_;
      break;
    }
    case kPumpAssignment: {
      delete message_type_.pump_assignment_;
      break;
    }
    case kPumpUpdate: {
      // No need to clear
      break;
    }
    case kReadyUpdate: {
      delete message_type_.ready_update_;
      break;
    }
    case MESSAGE_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MESSAGE_TYPE_NOT_SET;
}


void ServerMessage::Clear() {
  clear_message_type();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ServerMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 ping = 1;
      case 1: {
        if (tag == 8) {
          clear_message_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &message_type_.ping_)));
          set_has_ping();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_build_update;
        break;
      }

      // optional .proto.Construct build_update = 2;
      case 2: {
        if (tag == 18) {
         parse_build_update:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_build_update()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_join_response;
        break;
      }

      // optional .proto.JoinResponse join_response = 3;
      case 3: {
        if (tag == 26) {
         parse_join_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_join_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_state_update;
        break;
      }

      // optional .proto.GameState state_update = 4;
      case 4: {
        if (tag == 34) {
         parse_state_update:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_state_update()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_phase_update;
        break;
      }

      // optional .proto.Phase phase_update = 5;
      case 5: {
        if (tag == 40) {
         parse_phase_update:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::Phase_IsValid(value)) {
            set_phase_update(static_cast< ::proto::Phase >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_player_finished;
        break;
      }

      // optional int32 player_finished = 6;
      case 6: {
        if (tag == 48) {
         parse_player_finished:
          clear_message_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_type_.player_finished_)));
          set_has_player_finished();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_player_stats_update;
        break;
      }

      // optional .proto.PlayerStats player_stats_update = 7;
      case 7: {
        if (tag == 58) {
         parse_player_stats_update:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_stats_update()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_time_update;
        break;
      }

      // optional int32 time_update = 8;
      case 8: {
        if (tag == 64) {
         parse_time_update:
          clear_message_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_type_.time_update_)));
          set_has_time_update();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_change_avatar_update;
        break;
      }

      // optional .proto.AvatarChange change_avatar_update = 9;
      case 9: {
        if (tag == 74) {
         parse_change_avatar_update:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_change_avatar_update()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_pump_assignment;
        break;
      }

      // optional .proto.PumpAssignment pump_assignment = 10;
      case 10: {
        if (tag == 82) {
         parse_pump_assignment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pump_assignment()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_pump_update;
        break;
      }

      // optional int32 pump_update = 11;
      case 11: {
        if (tag == 88) {
         parse_pump_update:
          clear_message_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_type_.pump_update_)));
          set_has_pump_update();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_ready_update;
        break;
      }

      // optional .proto.ReadyUpdate ready_update = 12;
      case 12: {
        if (tag == 98) {
         parse_ready_update:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ready_update()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ServerMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ServerMessage)
  return false;
#undef DO_
}

void ServerMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ServerMessage)
  // optional uint64 ping = 1;
  if (has_ping()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->ping(), output);
  }

  // optional .proto.Construct build_update = 2;
  if (has_build_update()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->build_update(), output);
  }

  // optional .proto.JoinResponse join_response = 3;
  if (has_join_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->join_response(), output);
  }

  // optional .proto.GameState state_update = 4;
  if (has_state_update()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->state_update(), output);
  }

  // optional .proto.Phase phase_update = 5;
  if (has_phase_update()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->phase_update(), output);
  }

  // optional int32 player_finished = 6;
  if (has_player_finished()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->player_finished(), output);
  }

  // optional .proto.PlayerStats player_stats_update = 7;
  if (has_player_stats_update()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->player_stats_update(), output);
  }

  // optional int32 time_update = 8;
  if (has_time_update()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->time_update(), output);
  }

  // optional .proto.AvatarChange change_avatar_update = 9;
  if (has_change_avatar_update()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->change_avatar_update(), output);
  }

  // optional .proto.PumpAssignment pump_assignment = 10;
  if (has_pump_assignment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->pump_assignment(), output);
  }

  // optional int32 pump_update = 11;
  if (has_pump_update()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->pump_update(), output);
  }

  // optional .proto.ReadyUpdate ready_update = 12;
  if (has_ready_update()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->ready_update(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ServerMessage)
}

::google::protobuf::uint8* ServerMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ServerMessage)
  // optional uint64 ping = 1;
  if (has_ping()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->ping(), target);
  }

  // optional .proto.Construct build_update = 2;
  if (has_build_update()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->build_update(), target);
  }

  // optional .proto.JoinResponse join_response = 3;
  if (has_join_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->join_response(), target);
  }

  // optional .proto.GameState state_update = 4;
  if (has_state_update()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->state_update(), target);
  }

  // optional .proto.Phase phase_update = 5;
  if (has_phase_update()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->phase_update(), target);
  }

  // optional int32 player_finished = 6;
  if (has_player_finished()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->player_finished(), target);
  }

  // optional .proto.PlayerStats player_stats_update = 7;
  if (has_player_stats_update()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->player_stats_update(), target);
  }

  // optional int32 time_update = 8;
  if (has_time_update()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->time_update(), target);
  }

  // optional .proto.AvatarChange change_avatar_update = 9;
  if (has_change_avatar_update()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->change_avatar_update(), target);
  }

  // optional .proto.PumpAssignment pump_assignment = 10;
  if (has_pump_assignment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->pump_assignment(), target);
  }

  // optional int32 pump_update = 11;
  if (has_pump_update()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->pump_update(), target);
  }

  // optional .proto.ReadyUpdate ready_update = 12;
  if (has_ready_update()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->ready_update(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ServerMessage)
  return target;
}

int ServerMessage::ByteSize() const {
  int total_size = 0;

  switch (message_type_case()) {
    // optional uint64 ping = 1;
    case kPing: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ping());
      break;
    }
    // optional .proto.Construct build_update = 2;
    case kBuildUpdate: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->build_update());
      break;
    }
    // optional .proto.JoinResponse join_response = 3;
    case kJoinResponse: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->join_response());
      break;
    }
    // optional .proto.GameState state_update = 4;
    case kStateUpdate: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->state_update());
      break;
    }
    // optional .proto.Phase phase_update = 5;
    case kPhaseUpdate: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->phase_update());
      break;
    }
    // optional int32 player_finished = 6;
    case kPlayerFinished: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_finished());
      break;
    }
    // optional .proto.PlayerStats player_stats_update = 7;
    case kPlayerStatsUpdate: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_stats_update());
      break;
    }
    // optional int32 time_update = 8;
    case kTimeUpdate: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time_update());
      break;
    }
    // optional .proto.AvatarChange change_avatar_update = 9;
    case kChangeAvatarUpdate: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->change_avatar_update());
      break;
    }
    // optional .proto.PumpAssignment pump_assignment = 10;
    case kPumpAssignment: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pump_assignment());
      break;
    }
    // optional int32 pump_update = 11;
    case kPumpUpdate: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pump_update());
      break;
    }
    // optional .proto.ReadyUpdate ready_update = 12;
    case kReadyUpdate: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ready_update());
      break;
    }
    case MESSAGE_TYPE_NOT_SET: {
      break;
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerMessage::MergeFrom(const ServerMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  switch (from.message_type_case()) {
    case kPing: {
      set_ping(from.ping());
      break;
    }
    case kBuildUpdate: {
      mutable_build_update()->::proto::Construct::MergeFrom(from.build_update());
      break;
    }
    case kJoinResponse: {
      mutable_join_response()->::proto::JoinResponse::MergeFrom(from.join_response());
      break;
    }
    case kStateUpdate: {
      mutable_state_update()->::proto::GameState::MergeFrom(from.state_update());
      break;
    }
    case kPhaseUpdate: {
      set_phase_update(from.phase_update());
      break;
    }
    case kPlayerFinished: {
      set_player_finished(from.player_finished());
      break;
    }
    case kPlayerStatsUpdate: {
      mutable_player_stats_update()->::proto::PlayerStats::MergeFrom(from.player_stats_update());
      break;
    }
    case kTimeUpdate: {
      set_time_update(from.time_update());
      break;
    }
    case kChangeAvatarUpdate: {
      mutable_change_avatar_update()->::proto::AvatarChange::MergeFrom(from.change_avatar_update());
      break;
    }
    case kPumpAssignment: {
      mutable_pump_assignment()->::proto::PumpAssignment::MergeFrom(from.pump_assignment());
      break;
    }
    case kPumpUpdate: {
      set_pump_update(from.pump_update());
      break;
    }
    case kReadyUpdate: {
      mutable_ready_update()->::proto::ReadyUpdate::MergeFrom(from.ready_update());
      break;
    }
    case MESSAGE_TYPE_NOT_SET: {
      break;
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerMessage::CopyFrom(const ServerMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerMessage::IsInitialized() const {

  return true;
}

void ServerMessage::Swap(ServerMessage* other) {
  if (other != this) {
    std::swap(message_type_, other->message_type_);
    std::swap(_oneof_case_[0], other->_oneof_case_[0]);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerMessage_descriptor_;
  metadata.reflection = ServerMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientMessage::kPingFieldNumber;
const int ClientMessage::kBuildRequestFieldNumber;
const int ClientMessage::kJoinRequestFieldNumber;
const int ClientMessage::kMoveRequestFieldNumber;
const int ClientMessage::kPhaseRequestFieldNumber;
const int ClientMessage::kInteractRequestFieldNumber;
const int ClientMessage::kReadyRequestFieldNumber;
const int ClientMessage::kChangeAvatarRequestFieldNumber;
const int ClientMessage::kPumpRequestFieldNumber;
const int ClientMessage::kPlayerFinishedDialogueFieldNumber;
#endif  // !_MSC_VER

ClientMessage::ClientMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ClientMessage)
}

void ClientMessage::InitAsDefaultInstance() {
  ClientMessage_default_oneof_instance_->ping_ = const_cast< ::proto::Ping*>(&::proto::Ping::default_instance());
  ClientMessage_default_oneof_instance_->build_request_ = const_cast< ::proto::Construct*>(&::proto::Construct::default_instance());
  ClientMessage_default_oneof_instance_->join_request_ = &::google::protobuf::internal::GetEmptyStringAlreadyInited();
  ClientMessage_default_oneof_instance_->move_request_ = const_cast< ::proto::StickData*>(&::proto::StickData::default_instance());
  ClientMessage_default_oneof_instance_->phase_request_ = 4;
  ClientMessage_default_oneof_instance_->interact_request_ = 0;
  ClientMessage_default_oneof_instance_->ready_request_ = 0;
  ClientMessage_default_oneof_instance_->change_avatar_request_ = const_cast< ::proto::AvatarChange*>(&::proto::AvatarChange::default_instance());
  ClientMessage_default_oneof_instance_->pump_request_ = 0;
  ClientMessage_default_oneof_instance_->player_finished_dialogue_ = 0;
}

ClientMessage::ClientMessage(const ClientMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.ClientMessage)
}

void ClientMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_message_type();
}

ClientMessage::~ClientMessage() {
  // @@protoc_insertion_point(destructor:proto.ClientMessage)
  SharedDtor();
}

void ClientMessage::SharedDtor() {
  if (has_message_type()) {
    clear_message_type();
  }
  if (this != default_instance_) {
  }
}

void ClientMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientMessage_descriptor_;
}

const ClientMessage& ClientMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2eproto();
  return *default_instance_;
}

ClientMessage* ClientMessage::default_instance_ = NULL;

ClientMessage* ClientMessage::New() const {
  return new ClientMessage;
}

void ClientMessage::clear_message_type() {
  switch(message_type_case()) {
    case kPing: {
      delete message_type_.ping_;
      break;
    }
    case kBuildRequest: {
      delete message_type_.build_request_;
      break;
    }
    case kJoinRequest: {
      delete message_type_.join_request_;
      break;
    }
    case kMoveRequest: {
      delete message_type_.move_request_;
      break;
    }
    case kPhaseRequest: {
      // No need to clear
      break;
    }
    case kInteractRequest: {
      // No need to clear
      break;
    }
    case kReadyRequest: {
      // No need to clear
      break;
    }
    case kChangeAvatarRequest: {
      delete message_type_.change_avatar_request_;
      break;
    }
    case kPumpRequest: {
      // No need to clear
      break;
    }
    case kPlayerFinishedDialogue: {
      // No need to clear
      break;
    }
    case MESSAGE_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MESSAGE_TYPE_NOT_SET;
}


void ClientMessage::Clear() {
  clear_message_type();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ClientMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.Ping ping = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ping()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_build_request;
        break;
      }

      // optional .proto.Construct build_request = 2;
      case 2: {
        if (tag == 18) {
         parse_build_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_build_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_join_request;
        break;
      }

      // optional string join_request = 3;
      case 3: {
        if (tag == 26) {
         parse_join_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_join_request()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->join_request().data(), this->join_request().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "join_request");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_move_request;
        break;
      }

      // optional .proto.StickData move_request = 4;
      case 4: {
        if (tag == 34) {
         parse_move_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_move_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_phase_request;
        break;
      }

      // optional .proto.Phase phase_request = 5;
      case 5: {
        if (tag == 40) {
         parse_phase_request:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::Phase_IsValid(value)) {
            set_phase_request(static_cast< ::proto::Phase >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_interact_request;
        break;
      }

      // optional int32 interact_request = 6;
      case 6: {
        if (tag == 48) {
         parse_interact_request:
          clear_message_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_type_.interact_request_)));
          set_has_interact_request();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_ready_request;
        break;
      }

      // optional int32 ready_request = 7;
      case 7: {
        if (tag == 56) {
         parse_ready_request:
          clear_message_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_type_.ready_request_)));
          set_has_ready_request();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_change_avatar_request;
        break;
      }

      // optional .proto.AvatarChange change_avatar_request = 8;
      case 8: {
        if (tag == 66) {
         parse_change_avatar_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_change_avatar_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_pump_request;
        break;
      }

      // optional int32 pump_request = 9;
      case 9: {
        if (tag == 72) {
         parse_pump_request:
          clear_message_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_type_.pump_request_)));
          set_has_pump_request();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_player_finished_dialogue;
        break;
      }

      // optional int32 player_finished_dialogue = 10;
      case 10: {
        if (tag == 80) {
         parse_player_finished_dialogue:
          clear_message_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_type_.player_finished_dialogue_)));
          set_has_player_finished_dialogue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ClientMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ClientMessage)
  return false;
#undef DO_
}

void ClientMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ClientMessage)
  // optional .proto.Ping ping = 1;
  if (has_ping()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ping(), output);
  }

  // optional .proto.Construct build_request = 2;
  if (has_build_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->build_request(), output);
  }

  // optional string join_request = 3;
  if (has_join_request()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->join_request().data(), this->join_request().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "join_request");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->join_request(), output);
  }

  // optional .proto.StickData move_request = 4;
  if (has_move_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->move_request(), output);
  }

  // optional .proto.Phase phase_request = 5;
  if (has_phase_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->phase_request(), output);
  }

  // optional int32 interact_request = 6;
  if (has_interact_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->interact_request(), output);
  }

  // optional int32 ready_request = 7;
  if (has_ready_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->ready_request(), output);
  }

  // optional .proto.AvatarChange change_avatar_request = 8;
  if (has_change_avatar_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->change_avatar_request(), output);
  }

  // optional int32 pump_request = 9;
  if (has_pump_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->pump_request(), output);
  }

  // optional int32 player_finished_dialogue = 10;
  if (has_player_finished_dialogue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->player_finished_dialogue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ClientMessage)
}

::google::protobuf::uint8* ClientMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ClientMessage)
  // optional .proto.Ping ping = 1;
  if (has_ping()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ping(), target);
  }

  // optional .proto.Construct build_request = 2;
  if (has_build_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->build_request(), target);
  }

  // optional string join_request = 3;
  if (has_join_request()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->join_request().data(), this->join_request().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "join_request");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->join_request(), target);
  }

  // optional .proto.StickData move_request = 4;
  if (has_move_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->move_request(), target);
  }

  // optional .proto.Phase phase_request = 5;
  if (has_phase_request()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->phase_request(), target);
  }

  // optional int32 interact_request = 6;
  if (has_interact_request()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->interact_request(), target);
  }

  // optional int32 ready_request = 7;
  if (has_ready_request()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->ready_request(), target);
  }

  // optional .proto.AvatarChange change_avatar_request = 8;
  if (has_change_avatar_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->change_avatar_request(), target);
  }

  // optional int32 pump_request = 9;
  if (has_pump_request()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->pump_request(), target);
  }

  // optional int32 player_finished_dialogue = 10;
  if (has_player_finished_dialogue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->player_finished_dialogue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ClientMessage)
  return target;
}

int ClientMessage::ByteSize() const {
  int total_size = 0;

  switch (message_type_case()) {
    // optional .proto.Ping ping = 1;
    case kPing: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ping());
      break;
    }
    // optional .proto.Construct build_request = 2;
    case kBuildRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->build_request());
      break;
    }
    // optional string join_request = 3;
    case kJoinRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->join_request());
      break;
    }
    // optional .proto.StickData move_request = 4;
    case kMoveRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->move_request());
      break;
    }
    // optional .proto.Phase phase_request = 5;
    case kPhaseRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->phase_request());
      break;
    }
    // optional int32 interact_request = 6;
    case kInteractRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->interact_request());
      break;
    }
    // optional int32 ready_request = 7;
    case kReadyRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ready_request());
      break;
    }
    // optional .proto.AvatarChange change_avatar_request = 8;
    case kChangeAvatarRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->change_avatar_request());
      break;
    }
    // optional int32 pump_request = 9;
    case kPumpRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pump_request());
      break;
    }
    // optional int32 player_finished_dialogue = 10;
    case kPlayerFinishedDialogue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_finished_dialogue());
      break;
    }
    case MESSAGE_TYPE_NOT_SET: {
      break;
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientMessage::MergeFrom(const ClientMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  switch (from.message_type_case()) {
    case kPing: {
      mutable_ping()->::proto::Ping::MergeFrom(from.ping());
      break;
    }
    case kBuildRequest: {
      mutable_build_request()->::proto::Construct::MergeFrom(from.build_request());
      break;
    }
    case kJoinRequest: {
      set_join_request(from.join_request());
      break;
    }
    case kMoveRequest: {
      mutable_move_request()->::proto::StickData::MergeFrom(from.move_request());
      break;
    }
    case kPhaseRequest: {
      set_phase_request(from.phase_request());
      break;
    }
    case kInteractRequest: {
      set_interact_request(from.interact_request());
      break;
    }
    case kReadyRequest: {
      set_ready_request(from.ready_request());
      break;
    }
    case kChangeAvatarRequest: {
      mutable_change_avatar_request()->::proto::AvatarChange::MergeFrom(from.change_avatar_request());
      break;
    }
    case kPumpRequest: {
      set_pump_request(from.pump_request());
      break;
    }
    case kPlayerFinishedDialogue: {
      set_player_finished_dialogue(from.player_finished_dialogue());
      break;
    }
    case MESSAGE_TYPE_NOT_SET: {
      break;
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientMessage::CopyFrom(const ClientMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientMessage::IsInitialized() const {

  return true;
}

void ClientMessage::Swap(ClientMessage* other) {
  if (other != this) {
    std::swap(message_type_, other->message_type_);
    std::swap(_oneof_case_[0], other->_oneof_case_[0]);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientMessage_descriptor_;
  metadata.reflection = ClientMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Ping::kClientIdFieldNumber;
const int Ping::kPingFieldNumber;
#endif  // !_MSC_VER

Ping::Ping()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.Ping)
}

void Ping::InitAsDefaultInstance() {
}

Ping::Ping(const Ping& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.Ping)
}

void Ping::SharedCtor() {
  _cached_size_ = 0;
  client_id_ = 0;
  ping_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Ping::~Ping() {
  // @@protoc_insertion_point(destructor:proto.Ping)
  SharedDtor();
}

void Ping::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Ping::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ping::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ping_descriptor_;
}

const Ping& Ping::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2eproto();
  return *default_instance_;
}

Ping* Ping::default_instance_ = NULL;

Ping* Ping::New() const {
  return new Ping;
}

void Ping::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Ping*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(ping_, client_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Ping::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.Ping)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 client_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_id_)));
          set_has_client_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ping;
        break;
      }

      // optional uint64 ping = 2;
      case 2: {
        if (tag == 16) {
         parse_ping:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ping_)));
          set_has_ping();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.Ping)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.Ping)
  return false;
#undef DO_
}

void Ping::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.Ping)
  // optional int32 client_id = 1;
  if (has_client_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->client_id(), output);
  }

  // optional uint64 ping = 2;
  if (has_ping()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->ping(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.Ping)
}

::google::protobuf::uint8* Ping::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Ping)
  // optional int32 client_id = 1;
  if (has_client_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->client_id(), target);
  }

  // optional uint64 ping = 2;
  if (has_ping()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->ping(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Ping)
  return target;
}

int Ping::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 client_id = 1;
    if (has_client_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_id());
    }

    // optional uint64 ping = 2;
    if (has_ping()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ping());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ping::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Ping* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Ping*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Ping::MergeFrom(const Ping& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_id()) {
      set_client_id(from.client_id());
    }
    if (from.has_ping()) {
      set_ping(from.ping());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Ping::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ping::CopyFrom(const Ping& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ping::IsInitialized() const {

  return true;
}

void Ping::Swap(Ping* other) {
  if (other != this) {
    std::swap(client_id_, other->client_id_);
    std::swap(ping_, other->ping_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Ping::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ping_descriptor_;
  metadata.reflection = Ping_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Construct::kTypeFieldNumber;
const int Construct::kXFieldNumber;
const int Construct::kZFieldNumber;
const int Construct::kIdFieldNumber;
const int Construct::kStatusFieldNumber;
const int Construct::kPlayerIdFieldNumber;
const int Construct::kFwdXFieldNumber;
const int Construct::kFwdYFieldNumber;
const int Construct::kFwdZFieldNumber;
#endif  // !_MSC_VER

Construct::Construct()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.Construct)
}

void Construct::InitAsDefaultInstance() {
}

Construct::Construct(const Construct& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.Construct)
}

void Construct::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  x_ = 0;
  z_ = 0;
  id_ = 0;
  status_ = false;
  player_id_ = 0;
  fwd_x_ = 0;
  fwd_y_ = 0;
  fwd_z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Construct::~Construct() {
  // @@protoc_insertion_point(destructor:proto.Construct)
  SharedDtor();
}

void Construct::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Construct::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Construct::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Construct_descriptor_;
}

const Construct& Construct::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2eproto();
  return *default_instance_;
}

Construct* Construct::default_instance_ = NULL;

Construct* Construct::New() const {
  return new Construct;
}

void Construct::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Construct*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(type_, fwd_y_);
  }
  fwd_z_ = 0;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Construct::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.Construct)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_x;
        break;
      }

      // optional int32 x = 2;
      case 2: {
        if (tag == 16) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_z;
        break;
      }

      // optional int32 z = 3;
      case 3: {
        if (tag == 24) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_id;
        break;
      }

      // optional int32 id = 4;
      case 4: {
        if (tag == 32) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_status;
        break;
      }

      // optional bool status = 5;
      case 5: {
        if (tag == 40) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_player_id;
        break;
      }

      // optional int32 player_id = 6;
      case 6: {
        if (tag == 48) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_fwd_x;
        break;
      }

      // optional float fwd_x = 7;
      case 7: {
        if (tag == 61) {
         parse_fwd_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fwd_x_)));
          set_has_fwd_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_fwd_y;
        break;
      }

      // optional float fwd_y = 8;
      case 8: {
        if (tag == 69) {
         parse_fwd_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fwd_y_)));
          set_has_fwd_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_fwd_z;
        break;
      }

      // optional float fwd_z = 9;
      case 9: {
        if (tag == 77) {
         parse_fwd_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fwd_z_)));
          set_has_fwd_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.Construct)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.Construct)
  return false;
#undef DO_
}

void Construct::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.Construct)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 x = 2;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->x(), output);
  }

  // optional int32 z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->z(), output);
  }

  // optional int32 id = 4;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->id(), output);
  }

  // optional bool status = 5;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->status(), output);
  }

  // optional int32 player_id = 6;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->player_id(), output);
  }

  // optional float fwd_x = 7;
  if (has_fwd_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->fwd_x(), output);
  }

  // optional float fwd_y = 8;
  if (has_fwd_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->fwd_y(), output);
  }

  // optional float fwd_z = 9;
  if (has_fwd_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->fwd_z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.Construct)
}

::google::protobuf::uint8* Construct::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Construct)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 x = 2;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->x(), target);
  }

  // optional int32 z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->z(), target);
  }

  // optional int32 id = 4;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->id(), target);
  }

  // optional bool status = 5;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->status(), target);
  }

  // optional int32 player_id = 6;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->player_id(), target);
  }

  // optional float fwd_x = 7;
  if (has_fwd_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->fwd_x(), target);
  }

  // optional float fwd_y = 8;
  if (has_fwd_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->fwd_y(), target);
  }

  // optional float fwd_z = 9;
  if (has_fwd_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->fwd_z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Construct)
  return target;
}

int Construct::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 x = 2;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // optional int32 z = 3;
    if (has_z()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->z());
    }

    // optional int32 id = 4;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional bool status = 5;
    if (has_status()) {
      total_size += 1 + 1;
    }

    // optional int32 player_id = 6;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional float fwd_x = 7;
    if (has_fwd_x()) {
      total_size += 1 + 4;
    }

    // optional float fwd_y = 8;
    if (has_fwd_y()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float fwd_z = 9;
    if (has_fwd_z()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Construct::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Construct* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Construct*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Construct::MergeFrom(const Construct& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_fwd_x()) {
      set_fwd_x(from.fwd_x());
    }
    if (from.has_fwd_y()) {
      set_fwd_y(from.fwd_y());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_fwd_z()) {
      set_fwd_z(from.fwd_z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Construct::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Construct::CopyFrom(const Construct& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Construct::IsInitialized() const {

  return true;
}

void Construct::Swap(Construct* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(x_, other->x_);
    std::swap(z_, other->z_);
    std::swap(id_, other->id_);
    std::swap(status_, other->status_);
    std::swap(player_id_, other->player_id_);
    std::swap(fwd_x_, other->fwd_x_);
    std::swap(fwd_y_, other->fwd_y_);
    std::swap(fwd_z_, other->fwd_z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Construct::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Construct_descriptor_;
  metadata.reflection = Construct_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JoinResponse::kStatusFieldNumber;
const int JoinResponse::kNumPlayersFieldNumber;
const int JoinResponse::kIdFieldNumber;
const int JoinResponse::kObjIdFieldNumber;
const int JoinResponse::kModelIndexFieldNumber;
#endif  // !_MSC_VER

JoinResponse::JoinResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.JoinResponse)
}

void JoinResponse::InitAsDefaultInstance() {
}

JoinResponse::JoinResponse(const JoinResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.JoinResponse)
}

void JoinResponse::SharedCtor() {
  _cached_size_ = 0;
  status_ = false;
  num_players_ = 0;
  id_ = 0;
  obj_id_ = 0;
  model_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JoinResponse::~JoinResponse() {
  // @@protoc_insertion_point(destructor:proto.JoinResponse)
  SharedDtor();
}

void JoinResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JoinResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JoinResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JoinResponse_descriptor_;
}

const JoinResponse& JoinResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2eproto();
  return *default_instance_;
}

JoinResponse* JoinResponse::default_instance_ = NULL;

JoinResponse* JoinResponse::New() const {
  return new JoinResponse;
}

void JoinResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<JoinResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(status_, model_index_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JoinResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.JoinResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool status = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_num_players;
        break;
      }

      // optional int32 num_players = 2;
      case 2: {
        if (tag == 16) {
         parse_num_players:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_players_)));
          set_has_num_players();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional int32 id = 3;
      case 3: {
        if (tag == 24) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_obj_id;
        break;
      }

      // optional int32 obj_id = 4;
      case 4: {
        if (tag == 32) {
         parse_obj_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &obj_id_)));
          set_has_obj_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_model_index;
        break;
      }

      // optional int32 model_index = 5;
      case 5: {
        if (tag == 40) {
         parse_model_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &model_index_)));
          set_has_model_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.JoinResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.JoinResponse)
  return false;
#undef DO_
}

void JoinResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.JoinResponse)
  // optional bool status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->status(), output);
  }

  // optional int32 num_players = 2;
  if (has_num_players()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_players(), output);
  }

  // optional int32 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->id(), output);
  }

  // optional int32 obj_id = 4;
  if (has_obj_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->obj_id(), output);
  }

  // optional int32 model_index = 5;
  if (has_model_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->model_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.JoinResponse)
}

::google::protobuf::uint8* JoinResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.JoinResponse)
  // optional bool status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->status(), target);
  }

  // optional int32 num_players = 2;
  if (has_num_players()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num_players(), target);
  }

  // optional int32 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->id(), target);
  }

  // optional int32 obj_id = 4;
  if (has_obj_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->obj_id(), target);
  }

  // optional int32 model_index = 5;
  if (has_model_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->model_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.JoinResponse)
  return target;
}

int JoinResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool status = 1;
    if (has_status()) {
      total_size += 1 + 1;
    }

    // optional int32 num_players = 2;
    if (has_num_players()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_players());
    }

    // optional int32 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 obj_id = 4;
    if (has_obj_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->obj_id());
    }

    // optional int32 model_index = 5;
    if (has_model_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->model_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JoinResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JoinResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JoinResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JoinResponse::MergeFrom(const JoinResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_num_players()) {
      set_num_players(from.num_players());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_obj_id()) {
      set_obj_id(from.obj_id());
    }
    if (from.has_model_index()) {
      set_model_index(from.model_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JoinResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinResponse::CopyFrom(const JoinResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinResponse::IsInitialized() const {

  return true;
}

void JoinResponse::Swap(JoinResponse* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(num_players_, other->num_players_);
    std::swap(id_, other->id_);
    std::swap(obj_id_, other->obj_id_);
    std::swap(model_index_, other->model_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JoinResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JoinResponse_descriptor_;
  metadata.reflection = JoinResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameState::kObjectsFieldNumber;
const int GameState::kCollisionsFieldNumber;
const int GameState::kInteractsFieldNumber;
#endif  // !_MSC_VER

GameState::GameState()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GameState)
}

void GameState::InitAsDefaultInstance() {
}

GameState::GameState(const GameState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.GameState)
}

void GameState::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameState::~GameState() {
  // @@protoc_insertion_point(destructor:proto.GameState)
  SharedDtor();
}

void GameState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameState_descriptor_;
}

const GameState& GameState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2eproto();
  return *default_instance_;
}

GameState* GameState::default_instance_ = NULL;

GameState* GameState::New() const {
  return new GameState;
}

void GameState::Clear() {
  objects_.Clear();
  collisions_.Clear();
  interacts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GameState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.GameObject objects = 1;
      case 1: {
        if (tag == 10) {
         parse_objects:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_objects()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_objects;
        if (input->ExpectTag(18)) goto parse_collisions;
        break;
      }

      // repeated .proto.IdPair collisions = 2;
      case 2: {
        if (tag == 18) {
         parse_collisions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_collisions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_collisions;
        if (input->ExpectTag(26)) goto parse_interacts;
        break;
      }

      // repeated .proto.IdPair interacts = 3;
      case 3: {
        if (tag == 26) {
         parse_interacts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_interacts()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_interacts;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GameState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GameState)
  return false;
#undef DO_
}

void GameState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GameState)
  // repeated .proto.GameObject objects = 1;
  for (int i = 0; i < this->objects_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->objects(i), output);
  }

  // repeated .proto.IdPair collisions = 2;
  for (int i = 0; i < this->collisions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->collisions(i), output);
  }

  // repeated .proto.IdPair interacts = 3;
  for (int i = 0; i < this->interacts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->interacts(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GameState)
}

::google::protobuf::uint8* GameState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.GameState)
  // repeated .proto.GameObject objects = 1;
  for (int i = 0; i < this->objects_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->objects(i), target);
  }

  // repeated .proto.IdPair collisions = 2;
  for (int i = 0; i < this->collisions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->collisions(i), target);
  }

  // repeated .proto.IdPair interacts = 3;
  for (int i = 0; i < this->interacts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->interacts(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GameState)
  return target;
}

int GameState::ByteSize() const {
  int total_size = 0;

  // repeated .proto.GameObject objects = 1;
  total_size += 1 * this->objects_size();
  for (int i = 0; i < this->objects_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->objects(i));
  }

  // repeated .proto.IdPair collisions = 2;
  total_size += 1 * this->collisions_size();
  for (int i = 0; i < this->collisions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->collisions(i));
  }

  // repeated .proto.IdPair interacts = 3;
  total_size += 1 * this->interacts_size();
  for (int i = 0; i < this->interacts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->interacts(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameState::MergeFrom(const GameState& from) {
  GOOGLE_CHECK_NE(&from, this);
  objects_.MergeFrom(from.objects_);
  collisions_.MergeFrom(from.collisions_);
  interacts_.MergeFrom(from.interacts_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameState::CopyFrom(const GameState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameState::IsInitialized() const {

  return true;
}

void GameState::Swap(GameState* other) {
  if (other != this) {
    objects_.Swap(&other->objects_);
    collisions_.Swap(&other->collisions_);
    interacts_.Swap(&other->interacts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameState_descriptor_;
  metadata.reflection = GameState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IdPair::kInitiatorFieldNumber;
const int IdPair::kOtherFieldNumber;
#endif  // !_MSC_VER

IdPair::IdPair()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.IdPair)
}

void IdPair::InitAsDefaultInstance() {
}

IdPair::IdPair(const IdPair& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.IdPair)
}

void IdPair::SharedCtor() {
  _cached_size_ = 0;
  initiator_ = 0;
  other_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IdPair::~IdPair() {
  // @@protoc_insertion_point(destructor:proto.IdPair)
  SharedDtor();
}

void IdPair::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IdPair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IdPair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IdPair_descriptor_;
}

const IdPair& IdPair::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2eproto();
  return *default_instance_;
}

IdPair* IdPair::default_instance_ = NULL;

IdPair* IdPair::New() const {
  return new IdPair;
}

void IdPair::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IdPair*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(initiator_, other_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IdPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.IdPair)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 initiator = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &initiator_)));
          set_has_initiator();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_other;
        break;
      }

      // optional int32 other = 2;
      case 2: {
        if (tag == 16) {
         parse_other:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &other_)));
          set_has_other();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.IdPair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.IdPair)
  return false;
#undef DO_
}

void IdPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.IdPair)
  // optional int32 initiator = 1;
  if (has_initiator()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->initiator(), output);
  }

  // optional int32 other = 2;
  if (has_other()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->other(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.IdPair)
}

::google::protobuf::uint8* IdPair::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.IdPair)
  // optional int32 initiator = 1;
  if (has_initiator()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->initiator(), target);
  }

  // optional int32 other = 2;
  if (has_other()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->other(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.IdPair)
  return target;
}

int IdPair::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 initiator = 1;
    if (has_initiator()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->initiator());
    }

    // optional int32 other = 2;
    if (has_other()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->other());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IdPair::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IdPair* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IdPair*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IdPair::MergeFrom(const IdPair& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_initiator()) {
      set_initiator(from.initiator());
    }
    if (from.has_other()) {
      set_other(from.other());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IdPair::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IdPair::CopyFrom(const IdPair& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IdPair::IsInitialized() const {

  return true;
}

void IdPair::Swap(IdPair* other) {
  if (other != this) {
    std::swap(initiator_, other->initiator_);
    std::swap(other_, other->other_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IdPair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IdPair_descriptor_;
  metadata.reflection = IdPair_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* GameObject_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameObject_Type_descriptor_;
}
bool GameObject_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GameObject_Type GameObject::PLAYER;
const GameObject_Type GameObject::GOAL;
const GameObject_Type GameObject::CHEST;
const GameObject_Type GameObject::SPIKE;
const GameObject_Type GameObject::ESSENCE;
const GameObject_Type GameObject::PROJECTILE;
const GameObject_Type GameObject::Type_MIN;
const GameObject_Type GameObject::Type_MAX;
const int GameObject::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GameObject::kIdFieldNumber;
const int GameObject::kTypeFieldNumber;
const int GameObject::kTransformFieldNumber;
const int GameObject::kClientIdFieldNumber;
const int GameObject::kEnabledFieldNumber;
const int GameObject::kModelIndexFieldNumber;
const int GameObject::kParentIdFieldNumber;
const int GameObject::kSubtypeFieldNumber;
#endif  // !_MSC_VER

GameObject::GameObject()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GameObject)
}

void GameObject::InitAsDefaultInstance() {
}

GameObject::GameObject(const GameObject& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.GameObject)
}

void GameObject::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  type_ = 0;
  client_id_ = 0;
  enabled_ = false;
  model_index_ = 0;
  parent_id_ = 0;
  subtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameObject::~GameObject() {
  // @@protoc_insertion_point(destructor:proto.GameObject)
  SharedDtor();
}

void GameObject::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameObject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameObject_descriptor_;
}

const GameObject& GameObject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2eproto();
  return *default_instance_;
}

GameObject* GameObject::default_instance_ = NULL;

GameObject* GameObject::New() const {
  return new GameObject;
}

void GameObject::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GameObject*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 251) {
    ZR_(id_, type_);
    ZR_(client_id_, subtype_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  transform_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GameObject)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .proto.GameObject.Type type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::GameObject_Type_IsValid(value)) {
            set_type(static_cast< ::proto::GameObject_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_transform;
        break;
      }

      // repeated float transform = 3;
      case 3: {
        if (tag == 29) {
         parse_transform:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 29, input, this->mutable_transform())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_transform())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_transform;
        if (input->ExpectTag(32)) goto parse_client_id;
        break;
      }

      // optional int32 client_id = 4;
      case 4: {
        if (tag == 32) {
         parse_client_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_id_)));
          set_has_client_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_enabled;
        break;
      }

      // optional bool enabled = 5;
      case 5: {
        if (tag == 40) {
         parse_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
          set_has_enabled();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_model_index;
        break;
      }

      // optional int32 model_index = 6;
      case 6: {
        if (tag == 48) {
         parse_model_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &model_index_)));
          set_has_model_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_parent_id;
        break;
      }

      // optional int32 parent_id = 7;
      case 7: {
        if (tag == 56) {
         parse_parent_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &parent_id_)));
          set_has_parent_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_subtype;
        break;
      }

      // optional int32 subtype = 8;
      case 8: {
        if (tag == 64) {
         parse_subtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &subtype_)));
          set_has_subtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GameObject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GameObject)
  return false;
#undef DO_
}

void GameObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GameObject)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional .proto.GameObject.Type type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // repeated float transform = 3;
  for (int i = 0; i < this->transform_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      3, this->transform(i), output);
  }

  // optional int32 client_id = 4;
  if (has_client_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->client_id(), output);
  }

  // optional bool enabled = 5;
  if (has_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->enabled(), output);
  }

  // optional int32 model_index = 6;
  if (has_model_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->model_index(), output);
  }

  // optional int32 parent_id = 7;
  if (has_parent_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->parent_id(), output);
  }

  // optional int32 subtype = 8;
  if (has_subtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->subtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GameObject)
}

::google::protobuf::uint8* GameObject::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.GameObject)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional .proto.GameObject.Type type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // repeated float transform = 3;
  for (int i = 0; i < this->transform_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(3, this->transform(i), target);
  }

  // optional int32 client_id = 4;
  if (has_client_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->client_id(), target);
  }

  // optional bool enabled = 5;
  if (has_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->enabled(), target);
  }

  // optional int32 model_index = 6;
  if (has_model_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->model_index(), target);
  }

  // optional int32 parent_id = 7;
  if (has_parent_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->parent_id(), target);
  }

  // optional int32 subtype = 8;
  if (has_subtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->subtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GameObject)
  return target;
}

int GameObject::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional .proto.GameObject.Type type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 client_id = 4;
    if (has_client_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_id());
    }

    // optional bool enabled = 5;
    if (has_enabled()) {
      total_size += 1 + 1;
    }

    // optional int32 model_index = 6;
    if (has_model_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->model_index());
    }

    // optional int32 parent_id = 7;
    if (has_parent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->parent_id());
    }

    // optional int32 subtype = 8;
    if (has_subtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->subtype());
    }

  }
  // repeated float transform = 3;
  {
    int data_size = 0;
    data_size = 4 * this->transform_size();
    total_size += 1 * this->transform_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameObject::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameObject* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameObject*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameObject::MergeFrom(const GameObject& from) {
  GOOGLE_CHECK_NE(&from, this);
  transform_.MergeFrom(from.transform_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_client_id()) {
      set_client_id(from.client_id());
    }
    if (from.has_enabled()) {
      set_enabled(from.enabled());
    }
    if (from.has_model_index()) {
      set_model_index(from.model_index());
    }
    if (from.has_parent_id()) {
      set_parent_id(from.parent_id());
    }
    if (from.has_subtype()) {
      set_subtype(from.subtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameObject::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameObject::CopyFrom(const GameObject& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameObject::IsInitialized() const {

  return true;
}

void GameObject::Swap(GameObject* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    transform_.Swap(&other->transform_);
    std::swap(client_id_, other->client_id_);
    std::swap(enabled_, other->enabled_);
    std::swap(model_index_, other->model_index_);
    std::swap(parent_id_, other->parent_id_);
    std::swap(subtype_, other->subtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameObject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameObject_descriptor_;
  metadata.reflection = GameObject_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Collision::kIdFieldNumber;
const int Collision::kTypeFieldNumber;
#endif  // !_MSC_VER

Collision::Collision()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.Collision)
}

void Collision::InitAsDefaultInstance() {
}

Collision::Collision(const Collision& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.Collision)
}

void Collision::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Collision::~Collision() {
  // @@protoc_insertion_point(destructor:proto.Collision)
  SharedDtor();
}

void Collision::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Collision::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Collision::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Collision_descriptor_;
}

const Collision& Collision::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2eproto();
  return *default_instance_;
}

Collision* Collision::default_instance_ = NULL;

Collision* Collision::New() const {
  return new Collision;
}

void Collision::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Collision*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Collision::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.Collision)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.Collision)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.Collision)
  return false;
#undef DO_
}

void Collision::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.Collision)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.Collision)
}

::google::protobuf::uint8* Collision::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Collision)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Collision)
  return target;
}

int Collision::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Collision::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Collision* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Collision*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Collision::MergeFrom(const Collision& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Collision::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Collision::CopyFrom(const Collision& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Collision::IsInitialized() const {

  return true;
}

void Collision::Swap(Collision* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Collision::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Collision_descriptor_;
  metadata.reflection = Collision_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* StickData_Stick_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StickData_Stick_descriptor_;
}
bool StickData_Stick_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const StickData_Stick StickData::STICK_LEFT;
const StickData_Stick StickData::STICK_RIGHT;
const StickData_Stick StickData::Stick_MIN;
const StickData_Stick StickData::Stick_MAX;
const int StickData::Stick_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int StickData::kInputFieldNumber;
const int StickData::kXFieldNumber;
const int StickData::kYFieldNumber;
const int StickData::kIdFieldNumber;
#endif  // !_MSC_VER

StickData::StickData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.StickData)
}

void StickData::InitAsDefaultInstance() {
}

StickData::StickData(const StickData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.StickData)
}

void StickData::SharedCtor() {
  _cached_size_ = 0;
  input_ = 0;
  x_ = 0;
  y_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StickData::~StickData() {
  // @@protoc_insertion_point(destructor:proto.StickData)
  SharedDtor();
}

void StickData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StickData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StickData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StickData_descriptor_;
}

const StickData& StickData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2eproto();
  return *default_instance_;
}

StickData* StickData::default_instance_ = NULL;

StickData* StickData::New() const {
  return new StickData;
}

void StickData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<StickData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(input_, id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StickData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.StickData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.StickData.Stick input = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::StickData_Stick_IsValid(value)) {
            set_input(static_cast< ::proto::StickData_Stick >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_x;
        break;
      }

      // optional int32 x = 2;
      case 2: {
        if (tag == 16) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_y;
        break;
      }

      // optional int32 y = 3;
      case 3: {
        if (tag == 24) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_id;
        break;
      }

      // optional int32 id = 4;
      case 4: {
        if (tag == 32) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.StickData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.StickData)
  return false;
#undef DO_
}

void StickData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.StickData)
  // optional .proto.StickData.Stick input = 1;
  if (has_input()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->input(), output);
  }

  // optional int32 x = 2;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->x(), output);
  }

  // optional int32 y = 3;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->y(), output);
  }

  // optional int32 id = 4;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.StickData)
}

::google::protobuf::uint8* StickData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.StickData)
  // optional .proto.StickData.Stick input = 1;
  if (has_input()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->input(), target);
  }

  // optional int32 x = 2;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->x(), target);
  }

  // optional int32 y = 3;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->y(), target);
  }

  // optional int32 id = 4;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.StickData)
  return target;
}

int StickData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto.StickData.Stick input = 1;
    if (has_input()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->input());
    }

    // optional int32 x = 2;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // optional int32 y = 3;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

    // optional int32 id = 4;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StickData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StickData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StickData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StickData::MergeFrom(const StickData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_input()) {
      set_input(from.input());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StickData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StickData::CopyFrom(const StickData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StickData::IsInitialized() const {

  return true;
}

void StickData::Swap(StickData* other) {
  if (other != this) {
    std::swap(input_, other->input_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StickData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StickData_descriptor_;
  metadata.reflection = StickData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerStats::kIdFieldNumber;
const int PlayerStats::kCoinsFieldNumber;
#endif  // !_MSC_VER

PlayerStats::PlayerStats()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.PlayerStats)
}

void PlayerStats::InitAsDefaultInstance() {
}

PlayerStats::PlayerStats(const PlayerStats& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.PlayerStats)
}

void PlayerStats::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  coins_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerStats::~PlayerStats() {
  // @@protoc_insertion_point(destructor:proto.PlayerStats)
  SharedDtor();
}

void PlayerStats::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerStats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerStats_descriptor_;
}

const PlayerStats& PlayerStats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2eproto();
  return *default_instance_;
}

PlayerStats* PlayerStats::default_instance_ = NULL;

PlayerStats* PlayerStats::New() const {
  return new PlayerStats;
}

void PlayerStats::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PlayerStats*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, coins_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.PlayerStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_coins;
        break;
      }

      // optional int32 coins = 2;
      case 2: {
        if (tag == 16) {
         parse_coins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coins_)));
          set_has_coins();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.PlayerStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.PlayerStats)
  return false;
#undef DO_
}

void PlayerStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.PlayerStats)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 coins = 2;
  if (has_coins()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->coins(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.PlayerStats)
}

::google::protobuf::uint8* PlayerStats::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.PlayerStats)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 coins = 2;
  if (has_coins()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->coins(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.PlayerStats)
  return target;
}

int PlayerStats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 coins = 2;
    if (has_coins()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coins());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerStats::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerStats* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerStats*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerStats::MergeFrom(const PlayerStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_coins()) {
      set_coins(from.coins());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerStats::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerStats::CopyFrom(const PlayerStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerStats::IsInitialized() const {

  return true;
}

void PlayerStats::Swap(PlayerStats* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(coins_, other->coins_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerStats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerStats_descriptor_;
  metadata.reflection = PlayerStats_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AvatarChange::kPlayerIdFieldNumber;
const int AvatarChange::kModelIndexFieldNumber;
#endif  // !_MSC_VER

AvatarChange::AvatarChange()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.AvatarChange)
}

void AvatarChange::InitAsDefaultInstance() {
}

AvatarChange::AvatarChange(const AvatarChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.AvatarChange)
}

void AvatarChange::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = 0;
  model_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AvatarChange::~AvatarChange() {
  // @@protoc_insertion_point(destructor:proto.AvatarChange)
  SharedDtor();
}

void AvatarChange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AvatarChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AvatarChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AvatarChange_descriptor_;
}

const AvatarChange& AvatarChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2eproto();
  return *default_instance_;
}

AvatarChange* AvatarChange::default_instance_ = NULL;

AvatarChange* AvatarChange::New() const {
  return new AvatarChange;
}

void AvatarChange::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AvatarChange*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(player_id_, model_index_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AvatarChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.AvatarChange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 player_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_model_index;
        break;
      }

      // optional int32 model_index = 2;
      case 2: {
        if (tag == 16) {
         parse_model_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &model_index_)));
          set_has_model_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.AvatarChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.AvatarChange)
  return false;
#undef DO_
}

void AvatarChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.AvatarChange)
  // optional int32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player_id(), output);
  }

  // optional int32 model_index = 2;
  if (has_model_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->model_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.AvatarChange)
}

::google::protobuf::uint8* AvatarChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.AvatarChange)
  // optional int32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player_id(), target);
  }

  // optional int32 model_index = 2;
  if (has_model_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->model_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.AvatarChange)
  return target;
}

int AvatarChange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional int32 model_index = 2;
    if (has_model_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->model_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AvatarChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AvatarChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AvatarChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AvatarChange::MergeFrom(const AvatarChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_model_index()) {
      set_model_index(from.model_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AvatarChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AvatarChange::CopyFrom(const AvatarChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AvatarChange::IsInitialized() const {

  return true;
}

void AvatarChange::Swap(AvatarChange* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(model_index_, other->model_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AvatarChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AvatarChange_descriptor_;
  metadata.reflection = AvatarChange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PumpPair::kPlayerIdFieldNumber;
const int PumpPair::kPumpFieldNumber;
#endif  // !_MSC_VER

PumpPair::PumpPair()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.PumpPair)
}

void PumpPair::InitAsDefaultInstance() {
}

PumpPair::PumpPair(const PumpPair& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.PumpPair)
}

void PumpPair::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = 0;
  pump_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PumpPair::~PumpPair() {
  // @@protoc_insertion_point(destructor:proto.PumpPair)
  SharedDtor();
}

void PumpPair::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PumpPair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PumpPair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PumpPair_descriptor_;
}

const PumpPair& PumpPair::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2eproto();
  return *default_instance_;
}

PumpPair* PumpPair::default_instance_ = NULL;

PumpPair* PumpPair::New() const {
  return new PumpPair;
}

void PumpPair::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PumpPair*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(player_id_, pump_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PumpPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.PumpPair)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 player_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pump;
        break;
      }

      // optional int32 pump = 2;
      case 2: {
        if (tag == 16) {
         parse_pump:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pump_)));
          set_has_pump();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.PumpPair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.PumpPair)
  return false;
#undef DO_
}

void PumpPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.PumpPair)
  // optional int32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player_id(), output);
  }

  // optional int32 pump = 2;
  if (has_pump()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pump(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.PumpPair)
}

::google::protobuf::uint8* PumpPair::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.PumpPair)
  // optional int32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player_id(), target);
  }

  // optional int32 pump = 2;
  if (has_pump()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pump(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.PumpPair)
  return target;
}

int PumpPair::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional int32 pump = 2;
    if (has_pump()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pump());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PumpPair::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PumpPair* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PumpPair*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PumpPair::MergeFrom(const PumpPair& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_pump()) {
      set_pump(from.pump());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PumpPair::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PumpPair::CopyFrom(const PumpPair& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PumpPair::IsInitialized() const {

  return true;
}

void PumpPair::Swap(PumpPair* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(pump_, other->pump_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PumpPair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PumpPair_descriptor_;
  metadata.reflection = PumpPair_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PumpAssignment::kPairsFieldNumber;
#endif  // !_MSC_VER

PumpAssignment::PumpAssignment()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.PumpAssignment)
}

void PumpAssignment::InitAsDefaultInstance() {
}

PumpAssignment::PumpAssignment(const PumpAssignment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.PumpAssignment)
}

void PumpAssignment::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PumpAssignment::~PumpAssignment() {
  // @@protoc_insertion_point(destructor:proto.PumpAssignment)
  SharedDtor();
}

void PumpAssignment::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PumpAssignment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PumpAssignment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PumpAssignment_descriptor_;
}

const PumpAssignment& PumpAssignment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2eproto();
  return *default_instance_;
}

PumpAssignment* PumpAssignment::default_instance_ = NULL;

PumpAssignment* PumpAssignment::New() const {
  return new PumpAssignment;
}

void PumpAssignment::Clear() {
  pairs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PumpAssignment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.PumpAssignment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.PumpPair pairs = 1;
      case 1: {
        if (tag == 10) {
         parse_pairs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pairs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_pairs;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.PumpAssignment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.PumpAssignment)
  return false;
#undef DO_
}

void PumpAssignment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.PumpAssignment)
  // repeated .proto.PumpPair pairs = 1;
  for (int i = 0; i < this->pairs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pairs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.PumpAssignment)
}

::google::protobuf::uint8* PumpAssignment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.PumpAssignment)
  // repeated .proto.PumpPair pairs = 1;
  for (int i = 0; i < this->pairs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pairs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.PumpAssignment)
  return target;
}

int PumpAssignment::ByteSize() const {
  int total_size = 0;

  // repeated .proto.PumpPair pairs = 1;
  total_size += 1 * this->pairs_size();
  for (int i = 0; i < this->pairs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pairs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PumpAssignment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PumpAssignment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PumpAssignment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PumpAssignment::MergeFrom(const PumpAssignment& from) {
  GOOGLE_CHECK_NE(&from, this);
  pairs_.MergeFrom(from.pairs_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PumpAssignment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PumpAssignment::CopyFrom(const PumpAssignment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PumpAssignment::IsInitialized() const {

  return true;
}

void PumpAssignment::Swap(PumpAssignment* other) {
  if (other != this) {
    pairs_.Swap(&other->pairs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PumpAssignment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PumpAssignment_descriptor_;
  metadata.reflection = PumpAssignment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReadyUpdate::kPlayerIdFieldNumber;
const int ReadyUpdate::kReadyFieldNumber;
#endif  // !_MSC_VER

ReadyUpdate::ReadyUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ReadyUpdate)
}

void ReadyUpdate::InitAsDefaultInstance() {
}

ReadyUpdate::ReadyUpdate(const ReadyUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.ReadyUpdate)
}

void ReadyUpdate::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = 0;
  ready_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReadyUpdate::~ReadyUpdate() {
  // @@protoc_insertion_point(destructor:proto.ReadyUpdate)
  SharedDtor();
}

void ReadyUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReadyUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadyUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadyUpdate_descriptor_;
}

const ReadyUpdate& ReadyUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2eproto();
  return *default_instance_;
}

ReadyUpdate* ReadyUpdate::default_instance_ = NULL;

ReadyUpdate* ReadyUpdate::New() const {
  return new ReadyUpdate;
}

void ReadyUpdate::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReadyUpdate*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(player_id_, ready_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReadyUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ReadyUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 player_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ready;
        break;
      }

      // optional bool ready = 2;
      case 2: {
        if (tag == 16) {
         parse_ready:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ready_)));
          set_has_ready();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ReadyUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ReadyUpdate)
  return false;
#undef DO_
}

void ReadyUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ReadyUpdate)
  // optional int32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player_id(), output);
  }

  // optional bool ready = 2;
  if (has_ready()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->ready(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ReadyUpdate)
}

::google::protobuf::uint8* ReadyUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ReadyUpdate)
  // optional int32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player_id(), target);
  }

  // optional bool ready = 2;
  if (has_ready()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->ready(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ReadyUpdate)
  return target;
}

int ReadyUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional bool ready = 2;
    if (has_ready()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadyUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReadyUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReadyUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReadyUpdate::MergeFrom(const ReadyUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_ready()) {
      set_ready(from.ready());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReadyUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadyUpdate::CopyFrom(const ReadyUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadyUpdate::IsInitialized() const {

  return true;
}

void ReadyUpdate::Swap(ReadyUpdate* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(ready_, other->ready_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReadyUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReadyUpdate_descriptor_;
  metadata.reflection = ReadyUpdate_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)
