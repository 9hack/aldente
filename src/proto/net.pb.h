// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net.proto

#ifndef PROTOBUF_net_2eproto__INCLUDED
#define PROTOBUF_net_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2eproto();
void protobuf_AssignDesc_net_2eproto();
void protobuf_ShutdownFile_net_2eproto();

class ServerMessage;
class ClientMessage;
class Construct;
class JoinResponse;
class GameState;
class GameObject;
class Collision;
class StickData;

enum GameObject_Type {
  GameObject_Type_PLAYER = 0,
  GameObject_Type_GOAL = 1,
  GameObject_Type_CHEST = 2,
  GameObject_Type_SPIKE = 3
};
bool GameObject_Type_IsValid(int value);
const GameObject_Type GameObject_Type_Type_MIN = GameObject_Type_PLAYER;
const GameObject_Type GameObject_Type_Type_MAX = GameObject_Type_SPIKE;
const int GameObject_Type_Type_ARRAYSIZE = GameObject_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* GameObject_Type_descriptor();
inline const ::std::string& GameObject_Type_Name(GameObject_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    GameObject_Type_descriptor(), value);
}
inline bool GameObject_Type_Parse(
    const ::std::string& name, GameObject_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GameObject_Type>(
    GameObject_Type_descriptor(), name, value);
}
enum StickData_Stick {
  StickData_Stick_STICK_LEFT = 0,
  StickData_Stick_STICK_RIGHT = 1
};
bool StickData_Stick_IsValid(int value);
const StickData_Stick StickData_Stick_Stick_MIN = StickData_Stick_STICK_LEFT;
const StickData_Stick StickData_Stick_Stick_MAX = StickData_Stick_STICK_RIGHT;
const int StickData_Stick_Stick_ARRAYSIZE = StickData_Stick_Stick_MAX + 1;

const ::google::protobuf::EnumDescriptor* StickData_Stick_descriptor();
inline const ::std::string& StickData_Stick_Name(StickData_Stick value) {
  return ::google::protobuf::internal::NameOfEnum(
    StickData_Stick_descriptor(), value);
}
inline bool StickData_Stick_Parse(
    const ::std::string& name, StickData_Stick* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StickData_Stick>(
    StickData_Stick_descriptor(), name, value);
}
enum Phase {
  NOOP = 4,
  MENU = 0,
  BUILD = 1,
  DUNGEON = 2,
  MINIGAME = 3
};
bool Phase_IsValid(int value);
const Phase Phase_MIN = MENU;
const Phase Phase_MAX = NOOP;
const int Phase_ARRAYSIZE = Phase_MAX + 1;

const ::google::protobuf::EnumDescriptor* Phase_descriptor();
inline const ::std::string& Phase_Name(Phase value) {
  return ::google::protobuf::internal::NameOfEnum(
    Phase_descriptor(), value);
}
inline bool Phase_Parse(
    const ::std::string& name, Phase* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Phase>(
    Phase_descriptor(), name, value);
}
// ===================================================================

class ServerMessage : public ::google::protobuf::Message {
 public:
  ServerMessage();
  virtual ~ServerMessage();

  ServerMessage(const ServerMessage& from);

  inline ServerMessage& operator=(const ServerMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerMessage& default_instance();

  enum MessageTypeCase {
    kMessage = 1,
    kBuildUpdate = 2,
    kJoinResponse = 3,
    kStateUpdate = 4,
    kPhaseUpdate = 5,
    MESSAGE_TYPE_NOT_SET = 0,
  };

  void Swap(ServerMessage* other);

  // implements Message ----------------------------------------------

  ServerMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerMessage& from);
  void MergeFrom(const ServerMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string message = 1;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 1;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // optional .proto.Construct build_update = 2;
  inline bool has_build_update() const;
  inline void clear_build_update();
  static const int kBuildUpdateFieldNumber = 2;
  inline const ::proto::Construct& build_update() const;
  inline ::proto::Construct* mutable_build_update();
  inline ::proto::Construct* release_build_update();
  inline void set_allocated_build_update(::proto::Construct* build_update);

  // optional .proto.JoinResponse join_response = 3;
  inline bool has_join_response() const;
  inline void clear_join_response();
  static const int kJoinResponseFieldNumber = 3;
  inline const ::proto::JoinResponse& join_response() const;
  inline ::proto::JoinResponse* mutable_join_response();
  inline ::proto::JoinResponse* release_join_response();
  inline void set_allocated_join_response(::proto::JoinResponse* join_response);

  // optional .proto.GameState state_update = 4;
  inline bool has_state_update() const;
  inline void clear_state_update();
  static const int kStateUpdateFieldNumber = 4;
  inline const ::proto::GameState& state_update() const;
  inline ::proto::GameState* mutable_state_update();
  inline ::proto::GameState* release_state_update();
  inline void set_allocated_state_update(::proto::GameState* state_update);

  // optional .proto.Phase phase_update = 5;
  inline bool has_phase_update() const;
  inline void clear_phase_update();
  static const int kPhaseUpdateFieldNumber = 5;
  inline ::proto::Phase phase_update() const;
  inline void set_phase_update(::proto::Phase value);

  inline MessageTypeCase message_type_case() const;
  // @@protoc_insertion_point(class_scope:proto.ServerMessage)
 private:
  inline void set_has_message();
  inline void set_has_build_update();
  inline void set_has_join_response();
  inline void set_has_state_update();
  inline void set_has_phase_update();

  inline bool has_message_type();
  void clear_message_type();
  inline void clear_has_message_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  union MessageTypeUnion {
    ::std::string* message_;
    ::proto::Construct* build_update_;
    ::proto::JoinResponse* join_response_;
    ::proto::GameState* state_update_;
    int phase_update_;
  } message_type_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_net_2eproto();
  friend void protobuf_AssignDesc_net_2eproto();
  friend void protobuf_ShutdownFile_net_2eproto();

  void InitAsDefaultInstance();
  static ServerMessage* default_instance_;
};
// -------------------------------------------------------------------

class ClientMessage : public ::google::protobuf::Message {
 public:
  ClientMessage();
  virtual ~ClientMessage();

  ClientMessage(const ClientMessage& from);

  inline ClientMessage& operator=(const ClientMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientMessage& default_instance();

  enum MessageTypeCase {
    kMessage = 1,
    kBuildRequest = 2,
    kJoinRequest = 3,
    kMoveRequest = 4,
    kPhaseRequest = 5,
    kInteractRequest = 6,
    MESSAGE_TYPE_NOT_SET = 0,
  };

  void Swap(ClientMessage* other);

  // implements Message ----------------------------------------------

  ClientMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientMessage& from);
  void MergeFrom(const ClientMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string message = 1;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 1;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // optional .proto.Construct build_request = 2;
  inline bool has_build_request() const;
  inline void clear_build_request();
  static const int kBuildRequestFieldNumber = 2;
  inline const ::proto::Construct& build_request() const;
  inline ::proto::Construct* mutable_build_request();
  inline ::proto::Construct* release_build_request();
  inline void set_allocated_build_request(::proto::Construct* build_request);

  // optional string join_request = 3;
  inline bool has_join_request() const;
  inline void clear_join_request();
  static const int kJoinRequestFieldNumber = 3;
  inline const ::std::string& join_request() const;
  inline void set_join_request(const ::std::string& value);
  inline void set_join_request(const char* value);
  inline void set_join_request(const char* value, size_t size);
  inline ::std::string* mutable_join_request();
  inline ::std::string* release_join_request();
  inline void set_allocated_join_request(::std::string* join_request);

  // optional .proto.StickData move_request = 4;
  inline bool has_move_request() const;
  inline void clear_move_request();
  static const int kMoveRequestFieldNumber = 4;
  inline const ::proto::StickData& move_request() const;
  inline ::proto::StickData* mutable_move_request();
  inline ::proto::StickData* release_move_request();
  inline void set_allocated_move_request(::proto::StickData* move_request);

  // optional .proto.Phase phase_request = 5;
  inline bool has_phase_request() const;
  inline void clear_phase_request();
  static const int kPhaseRequestFieldNumber = 5;
  inline ::proto::Phase phase_request() const;
  inline void set_phase_request(::proto::Phase value);

  // optional int32 interact_request = 6;
  inline bool has_interact_request() const;
  inline void clear_interact_request();
  static const int kInteractRequestFieldNumber = 6;
  inline ::google::protobuf::int32 interact_request() const;
  inline void set_interact_request(::google::protobuf::int32 value);

  inline MessageTypeCase message_type_case() const;
  // @@protoc_insertion_point(class_scope:proto.ClientMessage)
 private:
  inline void set_has_message();
  inline void set_has_build_request();
  inline void set_has_join_request();
  inline void set_has_move_request();
  inline void set_has_phase_request();
  inline void set_has_interact_request();

  inline bool has_message_type();
  void clear_message_type();
  inline void clear_has_message_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  union MessageTypeUnion {
    ::std::string* message_;
    ::proto::Construct* build_request_;
    ::std::string* join_request_;
    ::proto::StickData* move_request_;
    int phase_request_;
    ::google::protobuf::int32 interact_request_;
  } message_type_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_net_2eproto();
  friend void protobuf_AssignDesc_net_2eproto();
  friend void protobuf_ShutdownFile_net_2eproto();

  void InitAsDefaultInstance();
  static ClientMessage* default_instance_;
};
// -------------------------------------------------------------------

class Construct : public ::google::protobuf::Message {
 public:
  Construct();
  virtual ~Construct();

  Construct(const Construct& from);

  inline Construct& operator=(const Construct& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Construct& default_instance();

  void Swap(Construct* other);

  // implements Message ----------------------------------------------

  Construct* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Construct& from);
  void MergeFrom(const Construct& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 x = 2;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 2;
  inline ::google::protobuf::int32 x() const;
  inline void set_x(::google::protobuf::int32 value);

  // optional int32 z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline ::google::protobuf::int32 z() const;
  inline void set_z(::google::protobuf::int32 value);

  // optional int32 id = 4;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 4;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional bool status = 5;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 5;
  inline bool status() const;
  inline void set_status(bool value);

  // @@protoc_insertion_point(class_scope:proto.Construct)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_z();
  inline void clear_has_z();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 z_;
  ::google::protobuf::int32 id_;
  bool status_;
  friend void  protobuf_AddDesc_net_2eproto();
  friend void protobuf_AssignDesc_net_2eproto();
  friend void protobuf_ShutdownFile_net_2eproto();

  void InitAsDefaultInstance();
  static Construct* default_instance_;
};
// -------------------------------------------------------------------

class JoinResponse : public ::google::protobuf::Message {
 public:
  JoinResponse();
  virtual ~JoinResponse();

  JoinResponse(const JoinResponse& from);

  inline JoinResponse& operator=(const JoinResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JoinResponse& default_instance();

  void Swap(JoinResponse* other);

  // implements Message ----------------------------------------------

  JoinResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JoinResponse& from);
  void MergeFrom(const JoinResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool status = 1;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline bool status() const;
  inline void set_status(bool value);

  // optional int32 num_players = 2;
  inline bool has_num_players() const;
  inline void clear_num_players();
  static const int kNumPlayersFieldNumber = 2;
  inline ::google::protobuf::int32 num_players() const;
  inline void set_num_players(::google::protobuf::int32 value);

  // optional int32 id = 3;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 obj_id = 4;
  inline bool has_obj_id() const;
  inline void clear_obj_id();
  static const int kObjIdFieldNumber = 4;
  inline ::google::protobuf::int32 obj_id() const;
  inline void set_obj_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.JoinResponse)
 private:
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_num_players();
  inline void clear_has_num_players();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_obj_id();
  inline void clear_has_obj_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool status_;
  ::google::protobuf::int32 num_players_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 obj_id_;
  friend void  protobuf_AddDesc_net_2eproto();
  friend void protobuf_AssignDesc_net_2eproto();
  friend void protobuf_ShutdownFile_net_2eproto();

  void InitAsDefaultInstance();
  static JoinResponse* default_instance_;
};
// -------------------------------------------------------------------

class GameState : public ::google::protobuf::Message {
 public:
  GameState();
  virtual ~GameState();

  GameState(const GameState& from);

  inline GameState& operator=(const GameState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameState& default_instance();

  void Swap(GameState* other);

  // implements Message ----------------------------------------------

  GameState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameState& from);
  void MergeFrom(const GameState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.GameObject objects = 1;
  inline int objects_size() const;
  inline void clear_objects();
  static const int kObjectsFieldNumber = 1;
  inline const ::proto::GameObject& objects(int index) const;
  inline ::proto::GameObject* mutable_objects(int index);
  inline ::proto::GameObject* add_objects();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::GameObject >&
      objects() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::GameObject >*
      mutable_objects();

  // repeated .proto.Collision collisions = 2;
  inline int collisions_size() const;
  inline void clear_collisions();
  static const int kCollisionsFieldNumber = 2;
  inline const ::proto::Collision& collisions(int index) const;
  inline ::proto::Collision* mutable_collisions(int index);
  inline ::proto::Collision* add_collisions();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::Collision >&
      collisions() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::Collision >*
      mutable_collisions();

  // repeated int32 interacts = 3;
  inline int interacts_size() const;
  inline void clear_interacts();
  static const int kInteractsFieldNumber = 3;
  inline ::google::protobuf::int32 interacts(int index) const;
  inline void set_interacts(int index, ::google::protobuf::int32 value);
  inline void add_interacts(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      interacts() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_interacts();

  // @@protoc_insertion_point(class_scope:proto.GameState)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::GameObject > objects_;
  ::google::protobuf::RepeatedPtrField< ::proto::Collision > collisions_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > interacts_;
  friend void  protobuf_AddDesc_net_2eproto();
  friend void protobuf_AssignDesc_net_2eproto();
  friend void protobuf_ShutdownFile_net_2eproto();

  void InitAsDefaultInstance();
  static GameState* default_instance_;
};
// -------------------------------------------------------------------

class GameObject : public ::google::protobuf::Message {
 public:
  GameObject();
  virtual ~GameObject();

  GameObject(const GameObject& from);

  inline GameObject& operator=(const GameObject& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameObject& default_instance();

  void Swap(GameObject* other);

  // implements Message ----------------------------------------------

  GameObject* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameObject& from);
  void MergeFrom(const GameObject& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef GameObject_Type Type;
  static const Type PLAYER = GameObject_Type_PLAYER;
  static const Type GOAL = GameObject_Type_GOAL;
  static const Type CHEST = GameObject_Type_CHEST;
  static const Type SPIKE = GameObject_Type_SPIKE;
  static inline bool Type_IsValid(int value) {
    return GameObject_Type_IsValid(value);
  }
  static const Type Type_MIN =
    GameObject_Type_Type_MIN;
  static const Type Type_MAX =
    GameObject_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    GameObject_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return GameObject_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return GameObject_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return GameObject_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional .proto.GameObject.Type type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::proto::GameObject_Type type() const;
  inline void set_type(::proto::GameObject_Type value);

  // optional float x = 3;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 3;
  inline float x() const;
  inline void set_x(float value);

  // optional float z = 4;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 4;
  inline float z() const;
  inline void set_z(float value);

  // optional float wx = 5;
  inline bool has_wx() const;
  inline void clear_wx();
  static const int kWxFieldNumber = 5;
  inline float wx() const;
  inline void set_wx(float value);

  // optional float wz = 6;
  inline bool has_wz() const;
  inline void clear_wz();
  static const int kWzFieldNumber = 6;
  inline float wz() const;
  inline void set_wz(float value);

  // optional int32 client_id = 7;
  inline bool has_client_id() const;
  inline void clear_client_id();
  static const int kClientIdFieldNumber = 7;
  inline ::google::protobuf::int32 client_id() const;
  inline void set_client_id(::google::protobuf::int32 value);

  // optional bool enabled = 8;
  inline bool has_enabled() const;
  inline void clear_enabled();
  static const int kEnabledFieldNumber = 8;
  inline bool enabled() const;
  inline void set_enabled(bool value);

  // @@protoc_insertion_point(class_scope:proto.GameObject)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_z();
  inline void clear_has_z();
  inline void set_has_wx();
  inline void clear_has_wx();
  inline void set_has_wz();
  inline void clear_has_wz();
  inline void set_has_client_id();
  inline void clear_has_client_id();
  inline void set_has_enabled();
  inline void clear_has_enabled();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 id_;
  int type_;
  float x_;
  float z_;
  float wx_;
  float wz_;
  ::google::protobuf::int32 client_id_;
  bool enabled_;
  friend void  protobuf_AddDesc_net_2eproto();
  friend void protobuf_AssignDesc_net_2eproto();
  friend void protobuf_ShutdownFile_net_2eproto();

  void InitAsDefaultInstance();
  static GameObject* default_instance_;
};
// -------------------------------------------------------------------

class Collision : public ::google::protobuf::Message {
 public:
  Collision();
  virtual ~Collision();

  Collision(const Collision& from);

  inline Collision& operator=(const Collision& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Collision& default_instance();

  void Swap(Collision* other);

  // implements Message ----------------------------------------------

  Collision* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Collision& from);
  void MergeFrom(const Collision& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.Collision)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 type_;
  friend void  protobuf_AddDesc_net_2eproto();
  friend void protobuf_AssignDesc_net_2eproto();
  friend void protobuf_ShutdownFile_net_2eproto();

  void InitAsDefaultInstance();
  static Collision* default_instance_;
};
// -------------------------------------------------------------------

class StickData : public ::google::protobuf::Message {
 public:
  StickData();
  virtual ~StickData();

  StickData(const StickData& from);

  inline StickData& operator=(const StickData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StickData& default_instance();

  void Swap(StickData* other);

  // implements Message ----------------------------------------------

  StickData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StickData& from);
  void MergeFrom(const StickData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef StickData_Stick Stick;
  static const Stick STICK_LEFT = StickData_Stick_STICK_LEFT;
  static const Stick STICK_RIGHT = StickData_Stick_STICK_RIGHT;
  static inline bool Stick_IsValid(int value) {
    return StickData_Stick_IsValid(value);
  }
  static const Stick Stick_MIN =
    StickData_Stick_Stick_MIN;
  static const Stick Stick_MAX =
    StickData_Stick_Stick_MAX;
  static const int Stick_ARRAYSIZE =
    StickData_Stick_Stick_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Stick_descriptor() {
    return StickData_Stick_descriptor();
  }
  static inline const ::std::string& Stick_Name(Stick value) {
    return StickData_Stick_Name(value);
  }
  static inline bool Stick_Parse(const ::std::string& name,
      Stick* value) {
    return StickData_Stick_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .proto.StickData.Stick input = 1;
  inline bool has_input() const;
  inline void clear_input();
  static const int kInputFieldNumber = 1;
  inline ::proto::StickData_Stick input() const;
  inline void set_input(::proto::StickData_Stick value);

  // optional int32 x = 2;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 2;
  inline ::google::protobuf::int32 x() const;
  inline void set_x(::google::protobuf::int32 value);

  // optional int32 y = 3;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 3;
  inline ::google::protobuf::int32 y() const;
  inline void set_y(::google::protobuf::int32 value);

  // optional int32 id = 4;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 4;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.StickData)
 private:
  inline void set_has_input();
  inline void clear_has_input();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int input_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  ::google::protobuf::int32 id_;
  friend void  protobuf_AddDesc_net_2eproto();
  friend void protobuf_AssignDesc_net_2eproto();
  friend void protobuf_ShutdownFile_net_2eproto();

  void InitAsDefaultInstance();
  static StickData* default_instance_;
};
// ===================================================================


// ===================================================================

// ServerMessage

// optional string message = 1;
inline bool ServerMessage::has_message() const {
  return message_type_case() == kMessage;
}
inline void ServerMessage::set_has_message() {
  _oneof_case_[0] = kMessage;
}
inline void ServerMessage::clear_message() {
  if (has_message()) {
    delete message_type_.message_;
    clear_has_message_type();
  }
}
inline const ::std::string& ServerMessage::message() const {
  if (has_message()) {
    return *message_type_.message_;
  }
  return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void ServerMessage::set_message(const ::std::string& value) {
  if (!has_message()) {
    clear_message_type();
    set_has_message();
    message_type_.message_ = new ::std::string;
  }
  message_type_.message_->assign(value);
}
inline void ServerMessage::set_message(const char* value) {
  if (!has_message()) {
    clear_message_type();
    set_has_message();
    message_type_.message_ = new ::std::string;
  }
  message_type_.message_->assign(value);
}
inline void ServerMessage::set_message(const char* value, size_t size) {
  if (!has_message()) {
    clear_message_type();
    set_has_message();
    message_type_.message_ = new ::std::string;
  }
  message_type_.message_->assign(
      reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ServerMessage::mutable_message() {
  if (!has_message()) {
    clear_message_type();
    set_has_message();
    message_type_.message_ = new ::std::string;
  }
  return message_type_.message_;
}
inline ::std::string* ServerMessage::release_message() {
  if (has_message()) {
    clear_has_message_type();
    ::std::string* temp = message_type_.message_;
    message_type_.message_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ServerMessage::set_allocated_message(::std::string* message) {
  clear_message_type();
  if (message) {
    set_has_message();
    message_type_.message_ = message;
  }
}

// optional .proto.Construct build_update = 2;
inline bool ServerMessage::has_build_update() const {
  return message_type_case() == kBuildUpdate;
}
inline void ServerMessage::set_has_build_update() {
  _oneof_case_[0] = kBuildUpdate;
}
inline void ServerMessage::clear_build_update() {
  if (has_build_update()) {
    delete message_type_.build_update_;
    clear_has_message_type();
  }
}
inline const ::proto::Construct& ServerMessage::build_update() const {
  return has_build_update() ? *message_type_.build_update_
                      : ::proto::Construct::default_instance();
}
inline ::proto::Construct* ServerMessage::mutable_build_update() {
  if (!has_build_update()) {
    clear_message_type();
    set_has_build_update();
    message_type_.build_update_ = new ::proto::Construct;
  }
  return message_type_.build_update_;
}
inline ::proto::Construct* ServerMessage::release_build_update() {
  if (has_build_update()) {
    clear_has_message_type();
    ::proto::Construct* temp = message_type_.build_update_;
    message_type_.build_update_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ServerMessage::set_allocated_build_update(::proto::Construct* build_update) {
  clear_message_type();
  if (build_update) {
    set_has_build_update();
    message_type_.build_update_ = build_update;
  }
}

// optional .proto.JoinResponse join_response = 3;
inline bool ServerMessage::has_join_response() const {
  return message_type_case() == kJoinResponse;
}
inline void ServerMessage::set_has_join_response() {
  _oneof_case_[0] = kJoinResponse;
}
inline void ServerMessage::clear_join_response() {
  if (has_join_response()) {
    delete message_type_.join_response_;
    clear_has_message_type();
  }
}
inline const ::proto::JoinResponse& ServerMessage::join_response() const {
  return has_join_response() ? *message_type_.join_response_
                      : ::proto::JoinResponse::default_instance();
}
inline ::proto::JoinResponse* ServerMessage::mutable_join_response() {
  if (!has_join_response()) {
    clear_message_type();
    set_has_join_response();
    message_type_.join_response_ = new ::proto::JoinResponse;
  }
  return message_type_.join_response_;
}
inline ::proto::JoinResponse* ServerMessage::release_join_response() {
  if (has_join_response()) {
    clear_has_message_type();
    ::proto::JoinResponse* temp = message_type_.join_response_;
    message_type_.join_response_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ServerMessage::set_allocated_join_response(::proto::JoinResponse* join_response) {
  clear_message_type();
  if (join_response) {
    set_has_join_response();
    message_type_.join_response_ = join_response;
  }
}

// optional .proto.GameState state_update = 4;
inline bool ServerMessage::has_state_update() const {
  return message_type_case() == kStateUpdate;
}
inline void ServerMessage::set_has_state_update() {
  _oneof_case_[0] = kStateUpdate;
}
inline void ServerMessage::clear_state_update() {
  if (has_state_update()) {
    delete message_type_.state_update_;
    clear_has_message_type();
  }
}
inline const ::proto::GameState& ServerMessage::state_update() const {
  return has_state_update() ? *message_type_.state_update_
                      : ::proto::GameState::default_instance();
}
inline ::proto::GameState* ServerMessage::mutable_state_update() {
  if (!has_state_update()) {
    clear_message_type();
    set_has_state_update();
    message_type_.state_update_ = new ::proto::GameState;
  }
  return message_type_.state_update_;
}
inline ::proto::GameState* ServerMessage::release_state_update() {
  if (has_state_update()) {
    clear_has_message_type();
    ::proto::GameState* temp = message_type_.state_update_;
    message_type_.state_update_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ServerMessage::set_allocated_state_update(::proto::GameState* state_update) {
  clear_message_type();
  if (state_update) {
    set_has_state_update();
    message_type_.state_update_ = state_update;
  }
}

// optional .proto.Phase phase_update = 5;
inline bool ServerMessage::has_phase_update() const {
  return message_type_case() == kPhaseUpdate;
}
inline void ServerMessage::set_has_phase_update() {
  _oneof_case_[0] = kPhaseUpdate;
}
inline void ServerMessage::clear_phase_update() {
  if (has_phase_update()) {
    message_type_.phase_update_ = 4;
    clear_has_message_type();
  }
}
inline ::proto::Phase ServerMessage::phase_update() const {
  if (has_phase_update()) {
    return static_cast< ::proto::Phase >(message_type_.phase_update_);
  }
  return static_cast< ::proto::Phase >(4);
}
inline void ServerMessage::set_phase_update(::proto::Phase value) {
  assert(::proto::Phase_IsValid(value));
  if (!has_phase_update()) {
    clear_message_type();
    set_has_phase_update();
  }
  message_type_.phase_update_ = value;
}

inline bool ServerMessage::has_message_type() {
  return message_type_case() != MESSAGE_TYPE_NOT_SET;
}
inline void ServerMessage::clear_has_message_type() {
  _oneof_case_[0] = MESSAGE_TYPE_NOT_SET;
}
inline ServerMessage::MessageTypeCase ServerMessage::message_type_case() const {
  return ServerMessage::MessageTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ClientMessage

// optional string message = 1;
inline bool ClientMessage::has_message() const {
  return message_type_case() == kMessage;
}
inline void ClientMessage::set_has_message() {
  _oneof_case_[0] = kMessage;
}
inline void ClientMessage::clear_message() {
  if (has_message()) {
    delete message_type_.message_;
    clear_has_message_type();
  }
}
inline const ::std::string& ClientMessage::message() const {
  if (has_message()) {
    return *message_type_.message_;
  }
  return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void ClientMessage::set_message(const ::std::string& value) {
  if (!has_message()) {
    clear_message_type();
    set_has_message();
    message_type_.message_ = new ::std::string;
  }
  message_type_.message_->assign(value);
}
inline void ClientMessage::set_message(const char* value) {
  if (!has_message()) {
    clear_message_type();
    set_has_message();
    message_type_.message_ = new ::std::string;
  }
  message_type_.message_->assign(value);
}
inline void ClientMessage::set_message(const char* value, size_t size) {
  if (!has_message()) {
    clear_message_type();
    set_has_message();
    message_type_.message_ = new ::std::string;
  }
  message_type_.message_->assign(
      reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ClientMessage::mutable_message() {
  if (!has_message()) {
    clear_message_type();
    set_has_message();
    message_type_.message_ = new ::std::string;
  }
  return message_type_.message_;
}
inline ::std::string* ClientMessage::release_message() {
  if (has_message()) {
    clear_has_message_type();
    ::std::string* temp = message_type_.message_;
    message_type_.message_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ClientMessage::set_allocated_message(::std::string* message) {
  clear_message_type();
  if (message) {
    set_has_message();
    message_type_.message_ = message;
  }
}

// optional .proto.Construct build_request = 2;
inline bool ClientMessage::has_build_request() const {
  return message_type_case() == kBuildRequest;
}
inline void ClientMessage::set_has_build_request() {
  _oneof_case_[0] = kBuildRequest;
}
inline void ClientMessage::clear_build_request() {
  if (has_build_request()) {
    delete message_type_.build_request_;
    clear_has_message_type();
  }
}
inline const ::proto::Construct& ClientMessage::build_request() const {
  return has_build_request() ? *message_type_.build_request_
                      : ::proto::Construct::default_instance();
}
inline ::proto::Construct* ClientMessage::mutable_build_request() {
  if (!has_build_request()) {
    clear_message_type();
    set_has_build_request();
    message_type_.build_request_ = new ::proto::Construct;
  }
  return message_type_.build_request_;
}
inline ::proto::Construct* ClientMessage::release_build_request() {
  if (has_build_request()) {
    clear_has_message_type();
    ::proto::Construct* temp = message_type_.build_request_;
    message_type_.build_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ClientMessage::set_allocated_build_request(::proto::Construct* build_request) {
  clear_message_type();
  if (build_request) {
    set_has_build_request();
    message_type_.build_request_ = build_request;
  }
}

// optional string join_request = 3;
inline bool ClientMessage::has_join_request() const {
  return message_type_case() == kJoinRequest;
}
inline void ClientMessage::set_has_join_request() {
  _oneof_case_[0] = kJoinRequest;
}
inline void ClientMessage::clear_join_request() {
  if (has_join_request()) {
    delete message_type_.join_request_;
    clear_has_message_type();
  }
}
inline const ::std::string& ClientMessage::join_request() const {
  if (has_join_request()) {
    return *message_type_.join_request_;
  }
  return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void ClientMessage::set_join_request(const ::std::string& value) {
  if (!has_join_request()) {
    clear_message_type();
    set_has_join_request();
    message_type_.join_request_ = new ::std::string;
  }
  message_type_.join_request_->assign(value);
}
inline void ClientMessage::set_join_request(const char* value) {
  if (!has_join_request()) {
    clear_message_type();
    set_has_join_request();
    message_type_.join_request_ = new ::std::string;
  }
  message_type_.join_request_->assign(value);
}
inline void ClientMessage::set_join_request(const char* value, size_t size) {
  if (!has_join_request()) {
    clear_message_type();
    set_has_join_request();
    message_type_.join_request_ = new ::std::string;
  }
  message_type_.join_request_->assign(
      reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ClientMessage::mutable_join_request() {
  if (!has_join_request()) {
    clear_message_type();
    set_has_join_request();
    message_type_.join_request_ = new ::std::string;
  }
  return message_type_.join_request_;
}
inline ::std::string* ClientMessage::release_join_request() {
  if (has_join_request()) {
    clear_has_message_type();
    ::std::string* temp = message_type_.join_request_;
    message_type_.join_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ClientMessage::set_allocated_join_request(::std::string* join_request) {
  clear_message_type();
  if (join_request) {
    set_has_join_request();
    message_type_.join_request_ = join_request;
  }
}

// optional .proto.StickData move_request = 4;
inline bool ClientMessage::has_move_request() const {
  return message_type_case() == kMoveRequest;
}
inline void ClientMessage::set_has_move_request() {
  _oneof_case_[0] = kMoveRequest;
}
inline void ClientMessage::clear_move_request() {
  if (has_move_request()) {
    delete message_type_.move_request_;
    clear_has_message_type();
  }
}
inline const ::proto::StickData& ClientMessage::move_request() const {
  return has_move_request() ? *message_type_.move_request_
                      : ::proto::StickData::default_instance();
}
inline ::proto::StickData* ClientMessage::mutable_move_request() {
  if (!has_move_request()) {
    clear_message_type();
    set_has_move_request();
    message_type_.move_request_ = new ::proto::StickData;
  }
  return message_type_.move_request_;
}
inline ::proto::StickData* ClientMessage::release_move_request() {
  if (has_move_request()) {
    clear_has_message_type();
    ::proto::StickData* temp = message_type_.move_request_;
    message_type_.move_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ClientMessage::set_allocated_move_request(::proto::StickData* move_request) {
  clear_message_type();
  if (move_request) {
    set_has_move_request();
    message_type_.move_request_ = move_request;
  }
}

// optional .proto.Phase phase_request = 5;
inline bool ClientMessage::has_phase_request() const {
  return message_type_case() == kPhaseRequest;
}
inline void ClientMessage::set_has_phase_request() {
  _oneof_case_[0] = kPhaseRequest;
}
inline void ClientMessage::clear_phase_request() {
  if (has_phase_request()) {
    message_type_.phase_request_ = 4;
    clear_has_message_type();
  }
}
inline ::proto::Phase ClientMessage::phase_request() const {
  if (has_phase_request()) {
    return static_cast< ::proto::Phase >(message_type_.phase_request_);
  }
  return static_cast< ::proto::Phase >(4);
}
inline void ClientMessage::set_phase_request(::proto::Phase value) {
  assert(::proto::Phase_IsValid(value));
  if (!has_phase_request()) {
    clear_message_type();
    set_has_phase_request();
  }
  message_type_.phase_request_ = value;
}

// optional int32 interact_request = 6;
inline bool ClientMessage::has_interact_request() const {
  return message_type_case() == kInteractRequest;
}
inline void ClientMessage::set_has_interact_request() {
  _oneof_case_[0] = kInteractRequest;
}
inline void ClientMessage::clear_interact_request() {
  if (has_interact_request()) {
    message_type_.interact_request_ = 0;
    clear_has_message_type();
  }
}
inline ::google::protobuf::int32 ClientMessage::interact_request() const {
  if (has_interact_request()) {
    return message_type_.interact_request_;
  }
  return 0;
}
inline void ClientMessage::set_interact_request(::google::protobuf::int32 value) {
  if (!has_interact_request()) {
    clear_message_type();
    set_has_interact_request();
  }
  message_type_.interact_request_ = value;
}

inline bool ClientMessage::has_message_type() {
  return message_type_case() != MESSAGE_TYPE_NOT_SET;
}
inline void ClientMessage::clear_has_message_type() {
  _oneof_case_[0] = MESSAGE_TYPE_NOT_SET;
}
inline ClientMessage::MessageTypeCase ClientMessage::message_type_case() const {
  return ClientMessage::MessageTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Construct

// optional int32 type = 1;
inline bool Construct::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Construct::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Construct::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Construct::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 Construct::type() const {
  // @@protoc_insertion_point(field_get:proto.Construct.type)
  return type_;
}
inline void Construct::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:proto.Construct.type)
}

// optional int32 x = 2;
inline bool Construct::has_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Construct::set_has_x() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Construct::clear_has_x() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Construct::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline ::google::protobuf::int32 Construct::x() const {
  // @@protoc_insertion_point(field_get:proto.Construct.x)
  return x_;
}
inline void Construct::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:proto.Construct.x)
}

// optional int32 z = 3;
inline bool Construct::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Construct::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Construct::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Construct::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline ::google::protobuf::int32 Construct::z() const {
  // @@protoc_insertion_point(field_get:proto.Construct.z)
  return z_;
}
inline void Construct::set_z(::google::protobuf::int32 value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:proto.Construct.z)
}

// optional int32 id = 4;
inline bool Construct::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Construct::set_has_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Construct::clear_has_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Construct::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Construct::id() const {
  // @@protoc_insertion_point(field_get:proto.Construct.id)
  return id_;
}
inline void Construct::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:proto.Construct.id)
}

// optional bool status = 5;
inline bool Construct::has_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Construct::set_has_status() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Construct::clear_has_status() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Construct::clear_status() {
  status_ = false;
  clear_has_status();
}
inline bool Construct::status() const {
  // @@protoc_insertion_point(field_get:proto.Construct.status)
  return status_;
}
inline void Construct::set_status(bool value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:proto.Construct.status)
}

// -------------------------------------------------------------------

// JoinResponse

// optional bool status = 1;
inline bool JoinResponse::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JoinResponse::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JoinResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JoinResponse::clear_status() {
  status_ = false;
  clear_has_status();
}
inline bool JoinResponse::status() const {
  // @@protoc_insertion_point(field_get:proto.JoinResponse.status)
  return status_;
}
inline void JoinResponse::set_status(bool value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:proto.JoinResponse.status)
}

// optional int32 num_players = 2;
inline bool JoinResponse::has_num_players() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JoinResponse::set_has_num_players() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JoinResponse::clear_has_num_players() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JoinResponse::clear_num_players() {
  num_players_ = 0;
  clear_has_num_players();
}
inline ::google::protobuf::int32 JoinResponse::num_players() const {
  // @@protoc_insertion_point(field_get:proto.JoinResponse.num_players)
  return num_players_;
}
inline void JoinResponse::set_num_players(::google::protobuf::int32 value) {
  set_has_num_players();
  num_players_ = value;
  // @@protoc_insertion_point(field_set:proto.JoinResponse.num_players)
}

// optional int32 id = 3;
inline bool JoinResponse::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JoinResponse::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JoinResponse::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JoinResponse::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 JoinResponse::id() const {
  // @@protoc_insertion_point(field_get:proto.JoinResponse.id)
  return id_;
}
inline void JoinResponse::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:proto.JoinResponse.id)
}

// optional int32 obj_id = 4;
inline bool JoinResponse::has_obj_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JoinResponse::set_has_obj_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JoinResponse::clear_has_obj_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JoinResponse::clear_obj_id() {
  obj_id_ = 0;
  clear_has_obj_id();
}
inline ::google::protobuf::int32 JoinResponse::obj_id() const {
  // @@protoc_insertion_point(field_get:proto.JoinResponse.obj_id)
  return obj_id_;
}
inline void JoinResponse::set_obj_id(::google::protobuf::int32 value) {
  set_has_obj_id();
  obj_id_ = value;
  // @@protoc_insertion_point(field_set:proto.JoinResponse.obj_id)
}

// -------------------------------------------------------------------

// GameState

// repeated .proto.GameObject objects = 1;
inline int GameState::objects_size() const {
  return objects_.size();
}
inline void GameState::clear_objects() {
  objects_.Clear();
}
inline const ::proto::GameObject& GameState::objects(int index) const {
  // @@protoc_insertion_point(field_get:proto.GameState.objects)
  return objects_.Get(index);
}
inline ::proto::GameObject* GameState::mutable_objects(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GameState.objects)
  return objects_.Mutable(index);
}
inline ::proto::GameObject* GameState::add_objects() {
  // @@protoc_insertion_point(field_add:proto.GameState.objects)
  return objects_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::GameObject >&
GameState::objects() const {
  // @@protoc_insertion_point(field_list:proto.GameState.objects)
  return objects_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::GameObject >*
GameState::mutable_objects() {
  // @@protoc_insertion_point(field_mutable_list:proto.GameState.objects)
  return &objects_;
}

// repeated .proto.Collision collisions = 2;
inline int GameState::collisions_size() const {
  return collisions_.size();
}
inline void GameState::clear_collisions() {
  collisions_.Clear();
}
inline const ::proto::Collision& GameState::collisions(int index) const {
  // @@protoc_insertion_point(field_get:proto.GameState.collisions)
  return collisions_.Get(index);
}
inline ::proto::Collision* GameState::mutable_collisions(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GameState.collisions)
  return collisions_.Mutable(index);
}
inline ::proto::Collision* GameState::add_collisions() {
  // @@protoc_insertion_point(field_add:proto.GameState.collisions)
  return collisions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::Collision >&
GameState::collisions() const {
  // @@protoc_insertion_point(field_list:proto.GameState.collisions)
  return collisions_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::Collision >*
GameState::mutable_collisions() {
  // @@protoc_insertion_point(field_mutable_list:proto.GameState.collisions)
  return &collisions_;
}

// repeated int32 interacts = 3;
inline int GameState::interacts_size() const {
  return interacts_.size();
}
inline void GameState::clear_interacts() {
  interacts_.Clear();
}
inline ::google::protobuf::int32 GameState::interacts(int index) const {
  // @@protoc_insertion_point(field_get:proto.GameState.interacts)
  return interacts_.Get(index);
}
inline void GameState::set_interacts(int index, ::google::protobuf::int32 value) {
  interacts_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GameState.interacts)
}
inline void GameState::add_interacts(::google::protobuf::int32 value) {
  interacts_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GameState.interacts)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GameState::interacts() const {
  // @@protoc_insertion_point(field_list:proto.GameState.interacts)
  return interacts_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GameState::mutable_interacts() {
  // @@protoc_insertion_point(field_mutable_list:proto.GameState.interacts)
  return &interacts_;
}

// -------------------------------------------------------------------

// GameObject

// optional int32 id = 1;
inline bool GameObject::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameObject::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameObject::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameObject::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 GameObject::id() const {
  // @@protoc_insertion_point(field_get:proto.GameObject.id)
  return id_;
}
inline void GameObject::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:proto.GameObject.id)
}

// optional .proto.GameObject.Type type = 2;
inline bool GameObject::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameObject::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameObject::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameObject::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::proto::GameObject_Type GameObject::type() const {
  // @@protoc_insertion_point(field_get:proto.GameObject.type)
  return static_cast< ::proto::GameObject_Type >(type_);
}
inline void GameObject::set_type(::proto::GameObject_Type value) {
  assert(::proto::GameObject_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:proto.GameObject.type)
}

// optional float x = 3;
inline bool GameObject::has_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GameObject::set_has_x() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GameObject::clear_has_x() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GameObject::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float GameObject::x() const {
  // @@protoc_insertion_point(field_get:proto.GameObject.x)
  return x_;
}
inline void GameObject::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:proto.GameObject.x)
}

// optional float z = 4;
inline bool GameObject::has_z() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GameObject::set_has_z() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GameObject::clear_has_z() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GameObject::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline float GameObject::z() const {
  // @@protoc_insertion_point(field_get:proto.GameObject.z)
  return z_;
}
inline void GameObject::set_z(float value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:proto.GameObject.z)
}

// optional float wx = 5;
inline bool GameObject::has_wx() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GameObject::set_has_wx() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GameObject::clear_has_wx() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GameObject::clear_wx() {
  wx_ = 0;
  clear_has_wx();
}
inline float GameObject::wx() const {
  // @@protoc_insertion_point(field_get:proto.GameObject.wx)
  return wx_;
}
inline void GameObject::set_wx(float value) {
  set_has_wx();
  wx_ = value;
  // @@protoc_insertion_point(field_set:proto.GameObject.wx)
}

// optional float wz = 6;
inline bool GameObject::has_wz() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GameObject::set_has_wz() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GameObject::clear_has_wz() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GameObject::clear_wz() {
  wz_ = 0;
  clear_has_wz();
}
inline float GameObject::wz() const {
  // @@protoc_insertion_point(field_get:proto.GameObject.wz)
  return wz_;
}
inline void GameObject::set_wz(float value) {
  set_has_wz();
  wz_ = value;
  // @@protoc_insertion_point(field_set:proto.GameObject.wz)
}

// optional int32 client_id = 7;
inline bool GameObject::has_client_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GameObject::set_has_client_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GameObject::clear_has_client_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GameObject::clear_client_id() {
  client_id_ = 0;
  clear_has_client_id();
}
inline ::google::protobuf::int32 GameObject::client_id() const {
  // @@protoc_insertion_point(field_get:proto.GameObject.client_id)
  return client_id_;
}
inline void GameObject::set_client_id(::google::protobuf::int32 value) {
  set_has_client_id();
  client_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GameObject.client_id)
}

// optional bool enabled = 8;
inline bool GameObject::has_enabled() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GameObject::set_has_enabled() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GameObject::clear_has_enabled() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GameObject::clear_enabled() {
  enabled_ = false;
  clear_has_enabled();
}
inline bool GameObject::enabled() const {
  // @@protoc_insertion_point(field_get:proto.GameObject.enabled)
  return enabled_;
}
inline void GameObject::set_enabled(bool value) {
  set_has_enabled();
  enabled_ = value;
  // @@protoc_insertion_point(field_set:proto.GameObject.enabled)
}

// -------------------------------------------------------------------

// Collision

// optional int32 id = 1;
inline bool Collision::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Collision::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Collision::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Collision::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Collision::id() const {
  // @@protoc_insertion_point(field_get:proto.Collision.id)
  return id_;
}
inline void Collision::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:proto.Collision.id)
}

// optional int32 type = 2;
inline bool Collision::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Collision::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Collision::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Collision::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 Collision::type() const {
  // @@protoc_insertion_point(field_get:proto.Collision.type)
  return type_;
}
inline void Collision::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:proto.Collision.type)
}

// -------------------------------------------------------------------

// StickData

// optional .proto.StickData.Stick input = 1;
inline bool StickData::has_input() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StickData::set_has_input() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StickData::clear_has_input() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StickData::clear_input() {
  input_ = 0;
  clear_has_input();
}
inline ::proto::StickData_Stick StickData::input() const {
  // @@protoc_insertion_point(field_get:proto.StickData.input)
  return static_cast< ::proto::StickData_Stick >(input_);
}
inline void StickData::set_input(::proto::StickData_Stick value) {
  assert(::proto::StickData_Stick_IsValid(value));
  set_has_input();
  input_ = value;
  // @@protoc_insertion_point(field_set:proto.StickData.input)
}

// optional int32 x = 2;
inline bool StickData::has_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StickData::set_has_x() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StickData::clear_has_x() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StickData::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline ::google::protobuf::int32 StickData::x() const {
  // @@protoc_insertion_point(field_get:proto.StickData.x)
  return x_;
}
inline void StickData::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:proto.StickData.x)
}

// optional int32 y = 3;
inline bool StickData::has_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StickData::set_has_y() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StickData::clear_has_y() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StickData::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline ::google::protobuf::int32 StickData::y() const {
  // @@protoc_insertion_point(field_get:proto.StickData.y)
  return y_;
}
inline void StickData::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:proto.StickData.y)
}

// optional int32 id = 4;
inline bool StickData::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StickData::set_has_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StickData::clear_has_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StickData::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 StickData::id() const {
  // @@protoc_insertion_point(field_get:proto.StickData.id)
  return id_;
}
inline void StickData::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:proto.StickData.id)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::proto::GameObject_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::GameObject_Type>() {
  return ::proto::GameObject_Type_descriptor();
}
template <> struct is_proto_enum< ::proto::StickData_Stick> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::StickData_Stick>() {
  return ::proto::StickData_Stick_descriptor();
}
template <> struct is_proto_enum< ::proto::Phase> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::Phase>() {
  return ::proto::Phase_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2eproto__INCLUDED
