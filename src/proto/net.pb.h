// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net.proto

#ifndef PROTOBUF_net_2eproto__INCLUDED
#define PROTOBUF_net_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace kuuhaku {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2eproto();
void protobuf_AssignDesc_net_2eproto();
void protobuf_ShutdownFile_net_2eproto();

class ServerMessage;
class ClientMessage;
class GameState;
class GameObject;
class GameObject_Location;
class JoystickData;
class Direction;

enum GameObject_Type {
  GameObject_Type_PLAYER = 0,
  GameObject_Type_NPC = 1,
  GameObject_Type_TILE = 2
};
bool GameObject_Type_IsValid(int value);
const GameObject_Type GameObject_Type_Type_MIN = GameObject_Type_PLAYER;
const GameObject_Type GameObject_Type_Type_MAX = GameObject_Type_TILE;
const int GameObject_Type_Type_ARRAYSIZE = GameObject_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* GameObject_Type_descriptor();
inline const ::std::string& GameObject_Type_Name(GameObject_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    GameObject_Type_descriptor(), value);
}
inline bool GameObject_Type_Parse(
    const ::std::string& name, GameObject_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GameObject_Type>(
    GameObject_Type_descriptor(), name, value);
}
enum Direction_Cardinal {
  Direction_Cardinal_NORTH = 0,
  Direction_Cardinal_EAST = 1,
  Direction_Cardinal_SOUTH = 2,
  Direction_Cardinal_WEST = 3
};
bool Direction_Cardinal_IsValid(int value);
const Direction_Cardinal Direction_Cardinal_Cardinal_MIN = Direction_Cardinal_NORTH;
const Direction_Cardinal Direction_Cardinal_Cardinal_MAX = Direction_Cardinal_WEST;
const int Direction_Cardinal_Cardinal_ARRAYSIZE = Direction_Cardinal_Cardinal_MAX + 1;

const ::google::protobuf::EnumDescriptor* Direction_Cardinal_descriptor();
inline const ::std::string& Direction_Cardinal_Name(Direction_Cardinal value) {
  return ::google::protobuf::internal::NameOfEnum(
    Direction_Cardinal_descriptor(), value);
}
inline bool Direction_Cardinal_Parse(
    const ::std::string& name, Direction_Cardinal* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Direction_Cardinal>(
    Direction_Cardinal_descriptor(), name, value);
}
// ===================================================================

class ServerMessage : public ::google::protobuf::Message {
 public:
  ServerMessage();
  virtual ~ServerMessage();

  ServerMessage(const ServerMessage& from);

  inline ServerMessage& operator=(const ServerMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerMessage& default_instance();

  void Swap(ServerMessage* other);

  // implements Message ----------------------------------------------

  ServerMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerMessage& from);
  void MergeFrom(const ServerMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string message = 1;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 1;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:kuuhaku.proto.ServerMessage)
 private:
  inline void set_has_message();
  inline void clear_has_message();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* message_;
  friend void  protobuf_AddDesc_net_2eproto();
  friend void protobuf_AssignDesc_net_2eproto();
  friend void protobuf_ShutdownFile_net_2eproto();

  void InitAsDefaultInstance();
  static ServerMessage* default_instance_;
};
// -------------------------------------------------------------------

class ClientMessage : public ::google::protobuf::Message {
 public:
  ClientMessage();
  virtual ~ClientMessage();

  ClientMessage(const ClientMessage& from);

  inline ClientMessage& operator=(const ClientMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientMessage& default_instance();

  void Swap(ClientMessage* other);

  // implements Message ----------------------------------------------

  ClientMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientMessage& from);
  void MergeFrom(const ClientMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string message = 1;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 1;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:kuuhaku.proto.ClientMessage)
 private:
  inline void set_has_message();
  inline void clear_has_message();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* message_;
  friend void  protobuf_AddDesc_net_2eproto();
  friend void protobuf_AssignDesc_net_2eproto();
  friend void protobuf_ShutdownFile_net_2eproto();

  void InitAsDefaultInstance();
  static ClientMessage* default_instance_;
};
// -------------------------------------------------------------------

class GameState : public ::google::protobuf::Message {
 public:
  GameState();
  virtual ~GameState();

  GameState(const GameState& from);

  inline GameState& operator=(const GameState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameState& default_instance();

  void Swap(GameState* other);

  // implements Message ----------------------------------------------

  GameState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameState& from);
  void MergeFrom(const GameState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .kuuhaku.proto.GameObject objects = 1;
  inline int objects_size() const;
  inline void clear_objects();
  static const int kObjectsFieldNumber = 1;
  inline const ::kuuhaku::proto::GameObject& objects(int index) const;
  inline ::kuuhaku::proto::GameObject* mutable_objects(int index);
  inline ::kuuhaku::proto::GameObject* add_objects();
  inline const ::google::protobuf::RepeatedPtrField< ::kuuhaku::proto::GameObject >&
      objects() const;
  inline ::google::protobuf::RepeatedPtrField< ::kuuhaku::proto::GameObject >*
      mutable_objects();

  // @@protoc_insertion_point(class_scope:kuuhaku.proto.GameState)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::kuuhaku::proto::GameObject > objects_;
  friend void  protobuf_AddDesc_net_2eproto();
  friend void protobuf_AssignDesc_net_2eproto();
  friend void protobuf_ShutdownFile_net_2eproto();

  void InitAsDefaultInstance();
  static GameState* default_instance_;
};
// -------------------------------------------------------------------

class GameObject_Location : public ::google::protobuf::Message {
 public:
  GameObject_Location();
  virtual ~GameObject_Location();

  GameObject_Location(const GameObject_Location& from);

  inline GameObject_Location& operator=(const GameObject_Location& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameObject_Location& default_instance();

  void Swap(GameObject_Location* other);

  // implements Message ----------------------------------------------

  GameObject_Location* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameObject_Location& from);
  void MergeFrom(const GameObject_Location& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double x = 1 [packed = true];
  inline int x_size() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline double x(int index) const;
  inline void set_x(int index, double value);
  inline void add_x(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      x() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_x();

  // repeated double y = 2 [packed = true];
  inline int y_size() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline double y(int index) const;
  inline void set_y(int index, double value);
  inline void add_y(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      y() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_y();

  // repeated double z = 3 [packed = true];
  inline int z_size() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline double z(int index) const;
  inline void set_z(int index, double value);
  inline void add_z(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      z() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_z();

  // repeated double w = 4 [packed = true];
  inline int w_size() const;
  inline void clear_w();
  static const int kWFieldNumber = 4;
  inline double w(int index) const;
  inline void set_w(int index, double value);
  inline void add_w(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      w() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_w();

  // @@protoc_insertion_point(class_scope:kuuhaku.proto.GameObject.Location)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< double > x_;
  mutable int _x_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > y_;
  mutable int _y_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > z_;
  mutable int _z_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > w_;
  mutable int _w_cached_byte_size_;
  friend void  protobuf_AddDesc_net_2eproto();
  friend void protobuf_AssignDesc_net_2eproto();
  friend void protobuf_ShutdownFile_net_2eproto();

  void InitAsDefaultInstance();
  static GameObject_Location* default_instance_;
};
// -------------------------------------------------------------------

class GameObject : public ::google::protobuf::Message {
 public:
  GameObject();
  virtual ~GameObject();

  GameObject(const GameObject& from);

  inline GameObject& operator=(const GameObject& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameObject& default_instance();

  void Swap(GameObject* other);

  // implements Message ----------------------------------------------

  GameObject* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameObject& from);
  void MergeFrom(const GameObject& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef GameObject_Location Location;

  typedef GameObject_Type Type;
  static const Type PLAYER = GameObject_Type_PLAYER;
  static const Type NPC = GameObject_Type_NPC;
  static const Type TILE = GameObject_Type_TILE;
  static inline bool Type_IsValid(int value) {
    return GameObject_Type_IsValid(value);
  }
  static const Type Type_MIN =
    GameObject_Type_Type_MIN;
  static const Type Type_MAX =
    GameObject_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    GameObject_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return GameObject_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return GameObject_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return GameObject_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .kuuhaku.proto.GameObject.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::kuuhaku::proto::GameObject_Type type() const;
  inline void set_type(::kuuhaku::proto::GameObject_Type value);

  // required .kuuhaku.proto.GameObject.Location location = 2;
  inline bool has_location() const;
  inline void clear_location();
  static const int kLocationFieldNumber = 2;
  inline const ::kuuhaku::proto::GameObject_Location& location() const;
  inline ::kuuhaku::proto::GameObject_Location* mutable_location();
  inline ::kuuhaku::proto::GameObject_Location* release_location();
  inline void set_allocated_location(::kuuhaku::proto::GameObject_Location* location);

  // @@protoc_insertion_point(class_scope:kuuhaku.proto.GameObject)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_location();
  inline void clear_has_location();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::kuuhaku::proto::GameObject_Location* location_;
  int type_;
  friend void  protobuf_AddDesc_net_2eproto();
  friend void protobuf_AssignDesc_net_2eproto();
  friend void protobuf_ShutdownFile_net_2eproto();

  void InitAsDefaultInstance();
  static GameObject* default_instance_;
};
// -------------------------------------------------------------------

class JoystickData : public ::google::protobuf::Message {
 public:
  JoystickData();
  virtual ~JoystickData();

  JoystickData(const JoystickData& from);

  inline JoystickData& operator=(const JoystickData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JoystickData& default_instance();

  void Swap(JoystickData* other);

  // implements Message ----------------------------------------------

  JoystickData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JoystickData& from);
  void MergeFrom(const JoystickData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required bool is_button = 2;
  inline bool has_is_button() const;
  inline void clear_is_button();
  static const int kIsButtonFieldNumber = 2;
  inline bool is_button() const;
  inline void set_is_button(bool value);

  // required int32 input = 3;
  inline bool has_input() const;
  inline void clear_input();
  static const int kInputFieldNumber = 3;
  inline ::google::protobuf::int32 input() const;
  inline void set_input(::google::protobuf::int32 value);

  // required int32 state = 4;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 4;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:kuuhaku.proto.JoystickData)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_is_button();
  inline void clear_has_is_button();
  inline void set_has_input();
  inline void clear_has_input();
  inline void set_has_state();
  inline void clear_has_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 id_;
  bool is_button_;
  ::google::protobuf::int32 input_;
  ::google::protobuf::int32 state_;
  friend void  protobuf_AddDesc_net_2eproto();
  friend void protobuf_AssignDesc_net_2eproto();
  friend void protobuf_ShutdownFile_net_2eproto();

  void InitAsDefaultInstance();
  static JoystickData* default_instance_;
};
// -------------------------------------------------------------------

class Direction : public ::google::protobuf::Message {
 public:
  Direction();
  virtual ~Direction();

  Direction(const Direction& from);

  inline Direction& operator=(const Direction& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Direction& default_instance();

  void Swap(Direction* other);

  // implements Message ----------------------------------------------

  Direction* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Direction& from);
  void MergeFrom(const Direction& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Direction_Cardinal Cardinal;
  static const Cardinal NORTH = Direction_Cardinal_NORTH;
  static const Cardinal EAST = Direction_Cardinal_EAST;
  static const Cardinal SOUTH = Direction_Cardinal_SOUTH;
  static const Cardinal WEST = Direction_Cardinal_WEST;
  static inline bool Cardinal_IsValid(int value) {
    return Direction_Cardinal_IsValid(value);
  }
  static const Cardinal Cardinal_MIN =
    Direction_Cardinal_Cardinal_MIN;
  static const Cardinal Cardinal_MAX =
    Direction_Cardinal_Cardinal_MAX;
  static const int Cardinal_ARRAYSIZE =
    Direction_Cardinal_Cardinal_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Cardinal_descriptor() {
    return Direction_Cardinal_descriptor();
  }
  static inline const ::std::string& Cardinal_Name(Cardinal value) {
    return Direction_Cardinal_Name(value);
  }
  static inline bool Cardinal_Parse(const ::std::string& name,
      Cardinal* value) {
    return Direction_Cardinal_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .kuuhaku.proto.Direction.Cardinal way = 1;
  inline bool has_way() const;
  inline void clear_way();
  static const int kWayFieldNumber = 1;
  inline ::kuuhaku::proto::Direction_Cardinal way() const;
  inline void set_way(::kuuhaku::proto::Direction_Cardinal value);

  // @@protoc_insertion_point(class_scope:kuuhaku.proto.Direction)
 private:
  inline void set_has_way();
  inline void clear_has_way();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int way_;
  friend void  protobuf_AddDesc_net_2eproto();
  friend void protobuf_AssignDesc_net_2eproto();
  friend void protobuf_ShutdownFile_net_2eproto();

  void InitAsDefaultInstance();
  static Direction* default_instance_;
};
// ===================================================================


// ===================================================================

// ServerMessage

// required string message = 1;
inline bool ServerMessage::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerMessage::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerMessage::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerMessage::clear_message() {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& ServerMessage::message() const {
  // @@protoc_insertion_point(field_get:kuuhaku.proto.ServerMessage.message)
  return *message_;
}
inline void ServerMessage::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(value);
  // @@protoc_insertion_point(field_set:kuuhaku.proto.ServerMessage.message)
}
inline void ServerMessage::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(value);
  // @@protoc_insertion_point(field_set_char:kuuhaku.proto.ServerMessage.message)
}
inline void ServerMessage::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:kuuhaku.proto.ServerMessage.message)
}
inline ::std::string* ServerMessage::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:kuuhaku.proto.ServerMessage.message)
  return message_;
}
inline ::std::string* ServerMessage::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ServerMessage::set_allocated_message(::std::string* message) {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:kuuhaku.proto.ServerMessage.message)
}

// -------------------------------------------------------------------

// ClientMessage

// required string message = 1;
inline bool ClientMessage::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientMessage::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClientMessage::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClientMessage::clear_message() {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& ClientMessage::message() const {
  // @@protoc_insertion_point(field_get:kuuhaku.proto.ClientMessage.message)
  return *message_;
}
inline void ClientMessage::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(value);
  // @@protoc_insertion_point(field_set:kuuhaku.proto.ClientMessage.message)
}
inline void ClientMessage::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(value);
  // @@protoc_insertion_point(field_set_char:kuuhaku.proto.ClientMessage.message)
}
inline void ClientMessage::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:kuuhaku.proto.ClientMessage.message)
}
inline ::std::string* ClientMessage::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:kuuhaku.proto.ClientMessage.message)
  return message_;
}
inline ::std::string* ClientMessage::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ClientMessage::set_allocated_message(::std::string* message) {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:kuuhaku.proto.ClientMessage.message)
}

// -------------------------------------------------------------------

// GameState

// repeated .kuuhaku.proto.GameObject objects = 1;
inline int GameState::objects_size() const {
  return objects_.size();
}
inline void GameState::clear_objects() {
  objects_.Clear();
}
inline const ::kuuhaku::proto::GameObject& GameState::objects(int index) const {
  // @@protoc_insertion_point(field_get:kuuhaku.proto.GameState.objects)
  return objects_.Get(index);
}
inline ::kuuhaku::proto::GameObject* GameState::mutable_objects(int index) {
  // @@protoc_insertion_point(field_mutable:kuuhaku.proto.GameState.objects)
  return objects_.Mutable(index);
}
inline ::kuuhaku::proto::GameObject* GameState::add_objects() {
  // @@protoc_insertion_point(field_add:kuuhaku.proto.GameState.objects)
  return objects_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::kuuhaku::proto::GameObject >&
GameState::objects() const {
  // @@protoc_insertion_point(field_list:kuuhaku.proto.GameState.objects)
  return objects_;
}
inline ::google::protobuf::RepeatedPtrField< ::kuuhaku::proto::GameObject >*
GameState::mutable_objects() {
  // @@protoc_insertion_point(field_mutable_list:kuuhaku.proto.GameState.objects)
  return &objects_;
}

// -------------------------------------------------------------------

// GameObject_Location

// repeated double x = 1 [packed = true];
inline int GameObject_Location::x_size() const {
  return x_.size();
}
inline void GameObject_Location::clear_x() {
  x_.Clear();
}
inline double GameObject_Location::x(int index) const {
  // @@protoc_insertion_point(field_get:kuuhaku.proto.GameObject.Location.x)
  return x_.Get(index);
}
inline void GameObject_Location::set_x(int index, double value) {
  x_.Set(index, value);
  // @@protoc_insertion_point(field_set:kuuhaku.proto.GameObject.Location.x)
}
inline void GameObject_Location::add_x(double value) {
  x_.Add(value);
  // @@protoc_insertion_point(field_add:kuuhaku.proto.GameObject.Location.x)
}
inline const ::google::protobuf::RepeatedField< double >&
GameObject_Location::x() const {
  // @@protoc_insertion_point(field_list:kuuhaku.proto.GameObject.Location.x)
  return x_;
}
inline ::google::protobuf::RepeatedField< double >*
GameObject_Location::mutable_x() {
  // @@protoc_insertion_point(field_mutable_list:kuuhaku.proto.GameObject.Location.x)
  return &x_;
}

// repeated double y = 2 [packed = true];
inline int GameObject_Location::y_size() const {
  return y_.size();
}
inline void GameObject_Location::clear_y() {
  y_.Clear();
}
inline double GameObject_Location::y(int index) const {
  // @@protoc_insertion_point(field_get:kuuhaku.proto.GameObject.Location.y)
  return y_.Get(index);
}
inline void GameObject_Location::set_y(int index, double value) {
  y_.Set(index, value);
  // @@protoc_insertion_point(field_set:kuuhaku.proto.GameObject.Location.y)
}
inline void GameObject_Location::add_y(double value) {
  y_.Add(value);
  // @@protoc_insertion_point(field_add:kuuhaku.proto.GameObject.Location.y)
}
inline const ::google::protobuf::RepeatedField< double >&
GameObject_Location::y() const {
  // @@protoc_insertion_point(field_list:kuuhaku.proto.GameObject.Location.y)
  return y_;
}
inline ::google::protobuf::RepeatedField< double >*
GameObject_Location::mutable_y() {
  // @@protoc_insertion_point(field_mutable_list:kuuhaku.proto.GameObject.Location.y)
  return &y_;
}

// repeated double z = 3 [packed = true];
inline int GameObject_Location::z_size() const {
  return z_.size();
}
inline void GameObject_Location::clear_z() {
  z_.Clear();
}
inline double GameObject_Location::z(int index) const {
  // @@protoc_insertion_point(field_get:kuuhaku.proto.GameObject.Location.z)
  return z_.Get(index);
}
inline void GameObject_Location::set_z(int index, double value) {
  z_.Set(index, value);
  // @@protoc_insertion_point(field_set:kuuhaku.proto.GameObject.Location.z)
}
inline void GameObject_Location::add_z(double value) {
  z_.Add(value);
  // @@protoc_insertion_point(field_add:kuuhaku.proto.GameObject.Location.z)
}
inline const ::google::protobuf::RepeatedField< double >&
GameObject_Location::z() const {
  // @@protoc_insertion_point(field_list:kuuhaku.proto.GameObject.Location.z)
  return z_;
}
inline ::google::protobuf::RepeatedField< double >*
GameObject_Location::mutable_z() {
  // @@protoc_insertion_point(field_mutable_list:kuuhaku.proto.GameObject.Location.z)
  return &z_;
}

// repeated double w = 4 [packed = true];
inline int GameObject_Location::w_size() const {
  return w_.size();
}
inline void GameObject_Location::clear_w() {
  w_.Clear();
}
inline double GameObject_Location::w(int index) const {
  // @@protoc_insertion_point(field_get:kuuhaku.proto.GameObject.Location.w)
  return w_.Get(index);
}
inline void GameObject_Location::set_w(int index, double value) {
  w_.Set(index, value);
  // @@protoc_insertion_point(field_set:kuuhaku.proto.GameObject.Location.w)
}
inline void GameObject_Location::add_w(double value) {
  w_.Add(value);
  // @@protoc_insertion_point(field_add:kuuhaku.proto.GameObject.Location.w)
}
inline const ::google::protobuf::RepeatedField< double >&
GameObject_Location::w() const {
  // @@protoc_insertion_point(field_list:kuuhaku.proto.GameObject.Location.w)
  return w_;
}
inline ::google::protobuf::RepeatedField< double >*
GameObject_Location::mutable_w() {
  // @@protoc_insertion_point(field_mutable_list:kuuhaku.proto.GameObject.Location.w)
  return &w_;
}

// -------------------------------------------------------------------

// GameObject

// required .kuuhaku.proto.GameObject.Type type = 1;
inline bool GameObject::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameObject::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameObject::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameObject::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::kuuhaku::proto::GameObject_Type GameObject::type() const {
  // @@protoc_insertion_point(field_get:kuuhaku.proto.GameObject.type)
  return static_cast< ::kuuhaku::proto::GameObject_Type >(type_);
}
inline void GameObject::set_type(::kuuhaku::proto::GameObject_Type value) {
  assert(::kuuhaku::proto::GameObject_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:kuuhaku.proto.GameObject.type)
}

// required .kuuhaku.proto.GameObject.Location location = 2;
inline bool GameObject::has_location() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameObject::set_has_location() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameObject::clear_has_location() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameObject::clear_location() {
  if (location_ != NULL) location_->::kuuhaku::proto::GameObject_Location::Clear();
  clear_has_location();
}
inline const ::kuuhaku::proto::GameObject_Location& GameObject::location() const {
  // @@protoc_insertion_point(field_get:kuuhaku.proto.GameObject.location)
  return location_ != NULL ? *location_ : *default_instance_->location_;
}
inline ::kuuhaku::proto::GameObject_Location* GameObject::mutable_location() {
  set_has_location();
  if (location_ == NULL) location_ = new ::kuuhaku::proto::GameObject_Location;
  // @@protoc_insertion_point(field_mutable:kuuhaku.proto.GameObject.location)
  return location_;
}
inline ::kuuhaku::proto::GameObject_Location* GameObject::release_location() {
  clear_has_location();
  ::kuuhaku::proto::GameObject_Location* temp = location_;
  location_ = NULL;
  return temp;
}
inline void GameObject::set_allocated_location(::kuuhaku::proto::GameObject_Location* location) {
  delete location_;
  location_ = location;
  if (location) {
    set_has_location();
  } else {
    clear_has_location();
  }
  // @@protoc_insertion_point(field_set_allocated:kuuhaku.proto.GameObject.location)
}

// -------------------------------------------------------------------

// JoystickData

// required int32 id = 1;
inline bool JoystickData::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JoystickData::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JoystickData::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JoystickData::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 JoystickData::id() const {
  // @@protoc_insertion_point(field_get:kuuhaku.proto.JoystickData.id)
  return id_;
}
inline void JoystickData::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:kuuhaku.proto.JoystickData.id)
}

// required bool is_button = 2;
inline bool JoystickData::has_is_button() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JoystickData::set_has_is_button() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JoystickData::clear_has_is_button() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JoystickData::clear_is_button() {
  is_button_ = false;
  clear_has_is_button();
}
inline bool JoystickData::is_button() const {
  // @@protoc_insertion_point(field_get:kuuhaku.proto.JoystickData.is_button)
  return is_button_;
}
inline void JoystickData::set_is_button(bool value) {
  set_has_is_button();
  is_button_ = value;
  // @@protoc_insertion_point(field_set:kuuhaku.proto.JoystickData.is_button)
}

// required int32 input = 3;
inline bool JoystickData::has_input() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JoystickData::set_has_input() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JoystickData::clear_has_input() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JoystickData::clear_input() {
  input_ = 0;
  clear_has_input();
}
inline ::google::protobuf::int32 JoystickData::input() const {
  // @@protoc_insertion_point(field_get:kuuhaku.proto.JoystickData.input)
  return input_;
}
inline void JoystickData::set_input(::google::protobuf::int32 value) {
  set_has_input();
  input_ = value;
  // @@protoc_insertion_point(field_set:kuuhaku.proto.JoystickData.input)
}

// required int32 state = 4;
inline bool JoystickData::has_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JoystickData::set_has_state() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JoystickData::clear_has_state() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JoystickData::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 JoystickData::state() const {
  // @@protoc_insertion_point(field_get:kuuhaku.proto.JoystickData.state)
  return state_;
}
inline void JoystickData::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:kuuhaku.proto.JoystickData.state)
}

// -------------------------------------------------------------------

// Direction

// required .kuuhaku.proto.Direction.Cardinal way = 1;
inline bool Direction::has_way() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Direction::set_has_way() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Direction::clear_has_way() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Direction::clear_way() {
  way_ = 0;
  clear_has_way();
}
inline ::kuuhaku::proto::Direction_Cardinal Direction::way() const {
  // @@protoc_insertion_point(field_get:kuuhaku.proto.Direction.way)
  return static_cast< ::kuuhaku::proto::Direction_Cardinal >(way_);
}
inline void Direction::set_way(::kuuhaku::proto::Direction_Cardinal value) {
  assert(::kuuhaku::proto::Direction_Cardinal_IsValid(value));
  set_has_way();
  way_ = value;
  // @@protoc_insertion_point(field_set:kuuhaku.proto.Direction.way)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace kuuhaku

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::kuuhaku::proto::GameObject_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kuuhaku::proto::GameObject_Type>() {
  return ::kuuhaku::proto::GameObject_Type_descriptor();
}
template <> struct is_proto_enum< ::kuuhaku::proto::Direction_Cardinal> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kuuhaku::proto::Direction_Cardinal>() {
  return ::kuuhaku::proto::Direction_Cardinal_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2eproto__INCLUDED
